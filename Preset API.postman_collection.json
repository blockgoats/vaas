{
	"info": {
		"_postman_id": "a758e5a7-b09d-48e2-bb7a-92a570e0b3fc",
		"name": "Preset API",
		"description": "| **Preset API Requirement  <br>**_The Preset API is only available for the_ [<i>Enterprise plan</i>](https://preset.io/pricing/)_._ |\n| --- |\n\nWelcome to the Preset API Collection.\n\n## Overview\n\nThe Preset REST API is a powerful feature that provides access to core functional aspects of both Preset Manager and Superset.\n\nThe API supports the following areas of Preset:\n\n- User and Team Management\n    \n- Workspace Management\n    \n- Connection and Data Management\n    \n- Visualization Management\n    \n- Permissions Management \\[Beta\\]\n    \n\nThis documentation lists the most relevant endpoints across all of the above functional areas of Preset.\n\n## Authentication\n\n### Generate an API Key\n\nTo generate an API key, from the Preset Manager screen (after log-in), hover your cursor over the initials icon and, in the sub-menu, select Manage User Settings.\n\n<img src=\"https://i.ibb.co/D1xHc92/api1.png\">\n\nIn the _API Keys_ section, select **\\+ Generate New API Key**\n\n<img src=\"https://i.ibb.co/LRWp7HC/api2.png\">\n\nThe _Generate a New API Key_ panel appears.\n\nIn the **Key Title** field, enter a name for the new API key.\n\nIn the **Key Description** field, enter a brief descripton of the API key.\n\nSelect **Submit**.\n\n<img src=\"https://i.ibb.co/cC0H4mY/api3.png\">\n\nThe **Token** field will automatically populate with a generated token.\n\nLikewise, the **Secret** field will automatically populate with a secret.\n\n<img src=\"https://i.ibb.co/8smp5pZ/api5.png\">\n\n_Reminder: Safeguard the Secret**Please take a moment to select the Copy icon and then safely store it._\n\nWhen ready, select **OK**.\n\n<img src=\"https://i.ibb.co/LdNDGNp/api6.png\">\n\nThe newly-created API key appears in the _API Keys_ section.\n\nBy default, the API key will be activated — to deactivate, toggle the **Active** slider to the off position.\n\nTo delete an API key, select the trash bin icon.\n\n### Using the Postman Collection\n\nAll requests on this collection inherit the **token** specified on the **Preset API** collection.\n\nTo authenticate:\n\n1. Click on the **Preset API Collection**.\n    \n2. Navigate to the **Variables** tab.\n    \n3. Provide your **API Token** on the `APITokenName` current value.\n    \n4. Provide the **API Token Secret** on the `APITokenSecret` current value.\n    \n\nThese would be used to generate a **JWT Token** that's stored as a **Global Variable**.\n\nThere's a script defined on this collection, that is always executed before any request. The script basically checks if there's a valid **JWT Token** and tries to generate one/refresh it if needed.\n\n---\n\n### Manually using the API\n\nUse the **Get a JWT Token** request to generate a `JWT Token.`",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2069753"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Get a JWT Token",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{APIToken}}\",\r\n    \"secret\": \"{{APISecret}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.app.preset.io/v1/auth/",
							"protocol": "https",
							"host": [
								"api",
								"app",
								"preset",
								"io"
							],
							"path": [
								"v1",
								"auth",
								""
							]
						},
						"description": "To interact with the Preset API, it's required to generate an API Key, that's used to generate a JWT token.\n\n1. Generate an API Key on the Preset Manager UI. Refer to [our documentation](https://docs.preset.io/docs/the-preset-api).\n2. Copy the API `token` and `secret`.\n    \n\nReplace in the body:\n\n- `{{APIToken}}` with the `token` from the UI.\n- `{{APISecret}}` with the `secret` from the UI."
					},
					"response": []
				}
			],
			"description": "API to authenticate and get a JWT token to interact with the Preset/Superset APIs.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Preset Manager APIs",
			"item": [
				{
					"name": "Teams",
					"item": [
						{
							"name": "Get Preset Teams",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										""
									]
								},
								"description": "Retrieves all Preset teams the user has access to."
							},
							"response": []
						},
						{
							"name": "Get Team Members",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/memberships",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"memberships"
									]
								},
								"description": "###### _Requires admin permission._\n\nGets all members of the Team.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`."
							},
							"response": []
						},
						{
							"name": "Get Pending Team Invites",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/invites",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"invites"
									]
								},
								"description": "###### *Requires admin permission.*\n\nGets all pending team invitations.\n\nReplace in the URL:\n\n*   `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`."
							},
							"response": []
						},
						{
							"name": "Get Team Regions",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/regions",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"regions"
									]
								},
								"description": "Gets all regions available for a Team.\n\nThis is useful for Teams with Managed Private Cloud (MPC) deployment(s), as they can create Workpsaces in all regular SaaS regions + MPC regions.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`."
							},
							"response": []
						},
						{
							"name": "Create a Team Invite",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"team_role_id\": {{RoleID}},\r\n    \"email\": \"{{Email}}\",\r\n    \"workspace_ids\": [ //optional\r\n        {{WorkspaceID}}\r\n    ],\r\n    \"workspace_role_identifier\": \"{{RoleIdentifier}}\" //optional\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/invites",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"invites"
									]
								},
								"description": "###### _Requires admin permission._\n\nCreates a team invitation, sent via email.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\nReplace in the Body:\n\n- `{{RoleID}}` with the desired role:\n    - Use **`2`** for **User**.\n        \n    - Use **`1`** for **Admin**.\n        \n- `{{Email}}` with the user's email address.\n    \n\nWhen triggering the invitation, you can also specify a **Workspace Role** to be applied to this user in certain Workspaces. To do so, replace:\n\n- `{{WorkspaceID}}` with the `id` retrieved through the API with the **Get Workspaces from a Team** endpoint. Multiple Workspace IDs can be added to the `workspace_ids` array (comma separated).\n    \n- `{{RoleIdentifier}}` with the desired option:\n    \n\n| **Workspace Role** | **Role Identifier** |\n| --- | --- |\n| Workspace Admin | `Admin` |\n| Primary Contributor | `PresetAlpha` |\n| Secondary Contributor | `PresetBeta` |\n| Limited Contributor | `PresetGamma` |\n| Visualization Contributor | `PresetDelta` |\n| Viewer | `PresetReportsOnly` |\n| Dashboard Interactor | `PresetEpsilon` |\n| Dashboard Viewer | `PresetDashboardsOnly` |\n| No Access | `PresetNoAccess` |\n\nEach role identifier corresponds to a specific Workspace Role. As a reminder, the access restrictions for each Workspace Role can be found [in our documentation](https://docs.preset.io/docs/data-access-roles-at-preset)."
							},
							"response": []
						},
						{
							"name": "Create Multiple Team Invites",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"invites\": [\r\n        {\r\n            \"team_role_id\": {{RoleID}},\r\n            \"email\": \"{{Email}}\",\r\n            \"workspace_ids\": [ //optional\r\n                {{WorkspaceID}}\r\n            ],\r\n            \"workspace_role_identifier\": \"{{WorkspaceRole}}\" //optional\r\n        },\r\n        {\r\n            \"team_role_id\": {{RoleID}},\r\n            \"email\": \"{{Email2}}\",\r\n            \"workspace_ids\": [ //optional\r\n                {{WorkspaceID}}\r\n            ],\r\n            \"workspace_role_identifier\": \"{{WorkspaceRole}}\" //optional\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/invites/many",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"invites",
										"many"
									]
								},
								"description": "###### _Requires admin permission._\n\nCreates multiple team invitations.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\nReplace in the body:\n\n- `{{RoleID}}` with the desired role:\n    - Use **`2`** for **User**.\n        \n    - Use **`1`** for **Admin**.\n        \n- `{{Email}}, {{Email2}}...` with the users' email addresses.\n    \n\nYou can also specify a **Workspace Role** to be applied to each user in certain Workspaces. To do so, replace:\n\n- `{{WorkspaceID}}` with the `id` retrieved through the API with the **Get Workspaces from a Team** endpoint. Multiple Workspace IDs can be added to the `workspace_ids` array (comma separated).\n    \n- `{{RoleIdentifier}}` with the desired option:\n    \n\n| **Workspace Role** | **Role Identifier** |\n| --- | --- |\n| Workspace Admin | `Admin` |\n| Primary Contributor | `PresetAlpha` |\n| Secondary Contributor | `PresetBeta` |\n| Limited Contributor | `PresetGamma` |\n| Visualization Contributor | `PresetDelta` |\n| Viewer | `PresetReportsOnly` |\n| Dashboard Interactor | `PresetEpsilon` |\n| Dashboard Viewer | `PresetDashboardsOnly` |\n| No Access | `PresetNoAccess` |\n\nEach role identifier corresponds to a specific Workspace Role. As a reminder, the access restrictions for each Workspace Role can be found [in our documentation](https://docs.preset.io/docs/data-access-roles-at-preset)."
							},
							"response": []
						},
						{
							"name": "Resend Invite",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/invites/resend/{{InviteID}}",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"invites",
										"resend",
										"{{InviteID}}"
									]
								},
								"description": "Resends a pending Team invitation.\n\nReplace in the URL:\n\n*   `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`\n    \n\n*   `{{InviteID}}`with the `id` retrieved through the API using the **Get Pending Team Invites** endpoint."
							},
							"response": []
						},
						{
							"name": "Update Team Title",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{NewTeamTitle}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}"
									]
								},
								"description": "###### _Requires admin permission._\n\nUpdates the Team title.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\nReplace in the Body:\n\n- `{{NewTeamTitle}}` by the new title you want to set."
							},
							"response": []
						},
						{
							"name": "Change User Role",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"team_role_id\": {{RoleID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/memberships/{{UserID}}",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"memberships",
										"{{UserID}}"
									]
								},
								"description": "###### _Requires admin permission._\n\nChanges a user's Team role.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n- `{{UserID}}`with the `id` retrieved using the **Get Team Members** endpoint.\n    \n\nReplace in the Body:\n\n- `{{RoleID}}` with the desired role:\n    - Use **`2`** for **User**.\n    - Use **`1`** for **Admin**."
							},
							"response": []
						},
						{
							"name": "Delete a Team Member",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/memberships/{{UserID}}",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"memberships",
										"{{UserID}}"
									]
								},
								"description": "###### _Requires admin permission._\n\nDeletes a Team member.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n- `{{UserID}}`with the `id` retrieved using the **Get Team Members** endpoint."
							},
							"response": []
						},
						{
							"name": "Delete Pending Invite",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/invites/{{InviteID}}",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"invites",
										"{{InviteID}}"
									]
								},
								"description": "###### *Requires admin permission.*\n\nDeletes a Team invitation.\n\nReplace in the URL:\n\n*   `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\n*   `{{InviteID}}`with the `id` retrieved through the API using the **Get Pending Team Invites** endpoint."
							},
							"response": []
						}
					],
					"description": "APIs to manage your Preset team."
				},
				{
					"name": "Workspaces",
					"item": [
						{
							"name": "Get Workspaces from a Team",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/workspaces",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"workspaces"
									]
								},
								"description": "Gets all Workspaces from the Team.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`."
							},
							"response": []
						},
						{
							"name": "Get a Workspace from a Team",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/workspaces/{{WorkspaceID}}",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"workspaces",
										"{{WorkspaceID}}"
									]
								},
								"description": "Gets a specific Workspace from the Team.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n- `{{WorkspaceID}}` with the `id` retrieved through the API with the **Get Workspaces from a Team** endpoint."
							},
							"response": []
						},
						{
							"name": "Get Workspace Users and Roles",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/workspaces/{{WorkspaceID}}/memberships",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"workspaces",
										"{{WorkspaceID}}",
										"memberships"
									]
								},
								"description": "###### _Requires admin permission._\n\nGets Users and their Workspace Roles from the Workspace.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\n- `{{WorkspaceID}}` with the `id` retrieved through the API with the **Get Workspaces from a Team** endpoint."
							},
							"response": []
						},
						{
							"name": "Get all Embedded Authentication Keys",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/workspaces/{{WorkspaceSlug}}/access-token-keys",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"workspaces",
										"{{WorkspaceSlug}}",
										"access-token-keys"
									]
								},
								"description": "###### _Requires admin permission._\n\nGets all Embedded Authentication token keys associated with a Workspace.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint)."
							},
							"response": []
						},
						{
							"name": "Create a SaaS Workspace for a Team",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{NewWorkspaceTitle}}\",\r\n    \"descr\": \"{{NewWorkspaceDescription}}\",\r\n    \"color\": \"{{NewWorkspaceColor}}\",\r\n    \"icon\": \"{{NewWorkspaceIcon}}\",\r\n    \"region\": \"{{NewWorkspaceRegion}}\",\r\n    \"load_examples\": {{LoadExamples}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/workspaces",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"workspaces"
									]
								},
								"description": "###### _Requires admin permission._\n\nCreates a new Workspace on the Team in a SaaS region.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\nReplace in the Body:\n\n- `{{NewWorkspaceTitle}}` by the title of the New Workspace you want to create.\n    \n- `{{NewWorkspaceDescription}}` with a description for this Workspace.\n    \n- `{{NewWorkspaceColor}}` with the desired color to be used by the Workspace tile. Available options:\n    \n    - `D0ABFF`\n        \n    - `FF9797`\n        \n    - `8CBAFF`\n        \n    - `FFE895`\n        \n    - `92D0BA`\n        \n    - `A0A0A0`\n        \n- `{{NewWorkspaceRegion}}` with the region that the Workspace should be created - refer to below table:\n    \n\n| Location | `NewWorkspaceRegion` |\n| --- | --- |\n| **US East Cost** | `us-east-1` |\n| **US West Coast** | `us-west-2` |\n| **Europe** | `eu-north-1` |\n| **Asia-Pacific** | `ap-northeast-1` |\n\n- `{{NewWorkspaceIcon}}` with the desired icon for the Workspace. Available options:\n    \n    - `four-o-clock`\n        \n    - `crescent-moon`\n        \n    - `high-voltage`\n        \n    - `recycle`\n        \n    - `airplane`\n        \n    - `desktop-computer`\n        \n    - `hourglass`\n        \n    - `rocket`\n        \n    - `alembic`\n        \n    - `diamond-dot`\n        \n    - `house`\n        \n    - `round-pushpin`\n        \n    - `anchor`\n        \n    - `direct-hit`\n        \n    - `key`\n        \n    - `scales`\n        \n    - `articulated-lorry`\n        \n    - `electric-light-bulb`\n        \n    - `lady-beetle`\n        \n    - `shield`\n        \n    - `automobile-car`\n        \n    - `electric-plug`\n        \n    - `leaf-fluttering`\n        \n    - `ship`\n        \n    - `banknote-dollar-sign`\n        \n    - `envelope`\n        \n    - `mobile-phone`\n        \n    - `shopping-trolley`\n        \n    - `bar-chart`\n        \n    - `evergreen-tree`\n        \n    - `music-note`\n        \n    - `snowflake`\n        \n    - `beer`\n        \n    - `factory`\n        \n    - `office-building`\n        \n    - `studio-microphone`\n        \n    - `bell`\n        \n    - `floppy-disk`\n        \n    - `package`\n        \n    - `telescope`\n        \n    - `birthday-cake`\n        \n    - `gear`\n        \n    - `page-facing-up`\n        \n    - `tram`\n        \n    - `black-square`\n        \n    - `gem-stone`\n        \n    - `paperclip`\n        \n    - `trophy`\n        \n    - `bomb`\n        \n    - `globe-meridians`\n        \n    - `paw-prints`\n        \n    - `victory-hand`\n        \n    - `briefcase`\n        \n    - `headphone`\n        \n    - `public-address-loudspeaker`\n        \n    - `vulcan-salute`\n        \n    - `broken-heart`\n        \n    - `heart`\n        \n    - `pushpin`\n        \n    - `world-map`\n        \n    - `chart-upwards`\n        \n    - `heavy-dollar-sign`\n        \n    - `racing-motorcycle`\n        \n- `{{LoadExamples}}` with `true` to inclue example assets in the Workspace, or `false` to create an empty Workspace."
							},
							"response": []
						},
						{
							"name": "Create an MPC Workspace for a Team",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{NewWorkspaceTitle}}\",\r\n    \"descr\": \"{{NewWorkspaceDescription}}\",\r\n    \"color\": \"{{NewWorkspaceColor}}\",\r\n    \"icon\": \"{{NewWorkspaceIcon}}\",\r\n    \"cluster_id\": \"{{MPCClusterID}}\",\r\n    \"load_examples\": {{LoadExamples}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/workspaces",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"workspaces"
									]
								},
								"description": "###### _Requires admin permission._\n\nCreates a new Workspace on the Team in an MPC region.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\nReplace in the Body:\n\n- `{{NewWorkspaceTitle}}` by the title of the New Workspace you want to create.\n    \n- `{{NewWorkspaceDescription}}` with a description for this Workspace.\n    \n- `{{NewWorkspaceColor}}` with the desired color to be used by the Workspace tile. Available options:\n    \n    - `D0ABFF`\n        \n    - `FF9797`\n        \n    - `8CBAFF`\n        \n    - `FFE895`\n        \n    - `92D0BA`\n        \n    - `A0A0A0`\n        \n- `{{MPCClusterID}}` with the `cluster_id` retrieved through the API from the **Get Team Regions** endpoint.\n    \n- `{{NewWorkspaceIcon}}` with the desired icon for the Workspace. Available options:\n    \n    - `four-o-clock`\n        \n    - `crescent-moon`\n        \n    - `high-voltage`\n        \n    - `recycle`\n        \n    - `airplane`\n        \n    - `desktop-computer`\n        \n    - `hourglass`\n        \n    - `rocket`\n        \n    - `alembic`\n        \n    - `diamond-dot`\n        \n    - `house`\n        \n    - `round-pushpin`\n        \n    - `anchor`\n        \n    - `direct-hit`\n        \n    - `key`\n        \n    - `scales`\n        \n    - `articulated-lorry`\n        \n    - `electric-light-bulb`\n        \n    - `lady-beetle`\n        \n    - `shield`\n        \n    - `automobile-car`\n        \n    - `electric-plug`\n        \n    - `leaf-fluttering`\n        \n    - `ship`\n        \n    - `banknote-dollar-sign`\n        \n    - `envelope`\n        \n    - `mobile-phone`\n        \n    - `shopping-trolley`\n        \n    - `bar-chart`\n        \n    - `evergreen-tree`\n        \n    - `music-note`\n        \n    - `snowflake`\n        \n    - `beer`\n        \n    - `factory`\n        \n    - `office-building`\n        \n    - `studio-microphone`\n        \n    - `bell`\n        \n    - `floppy-disk`\n        \n    - `package`\n        \n    - `telescope`\n        \n    - `birthday-cake`\n        \n    - `gear`\n        \n    - `page-facing-up`\n        \n    - `tram`\n        \n    - `black-square`\n        \n    - `gem-stone`\n        \n    - `paperclip`\n        \n    - `trophy`\n        \n    - `bomb`\n        \n    - `globe-meridians`\n        \n    - `paw-prints`\n        \n    - `victory-hand`\n        \n    - `briefcase`\n        \n    - `headphone`\n        \n    - `public-address-loudspeaker`\n        \n    - `vulcan-salute`\n        \n    - `broken-heart`\n        \n    - `heart`\n        \n    - `pushpin`\n        \n    - `world-map`\n        \n    - `chart-upwards`\n        \n    - `heavy-dollar-sign`\n        \n    - `racing-motorcycle`\n        \n- `{{LoadExamples}}` with `true` to inclue example assets in the Workspace, or `false` to create an empty Workspace."
							},
							"response": []
						},
						{
							"name": "Create an Embedded Authentication Key",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pub_key_der\": \"{{PublicKey}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/workspaces/{{WorkspaceSlug}}/access-token-keys",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"workspaces",
										"{{WorkspaceSlug}}",
										"access-token-keys"
									]
								},
								"description": "###### _Requires admin permission._\n\nCreates an Embedded Authentication token key.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n\nReplace in the body:\n\n- `{{PublicKey}}` with your PEM-encoded public key. It should begin with `-----BEGIN PUBLIC KEY-----` and end with `-----END PUBLIC KEY-----`. Ensure no spaces or headers are included outside the encapsulation boundaries. The key must be provided in a single, continuous block of text and should be at least 2048 bits long."
							},
							"response": []
						},
						{
							"name": "Update a Workspace",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{NewWorkspaceTitle}}\",\r\n    \"descr\": \"{{NewWorkspaceDescription}}\",\r\n    \"color\": \"{{NewWorkspaceColor}}\",\r\n    \"icon\": \"{{NewWorkspaceIcon}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/workspaces/{{WorkspaceID}}",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"workspaces",
										"{{WorkspaceID}}"
									]
								},
								"description": "###### _Requires admin permission._\n\nUpdates an existing Workspace from the team.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n- `{{WorkspaceID}}` with the `id` retrieved through the API with the **Get Workspaces from a Team** endpoint.\n    \n\nReplace in the Body:\n\n- `{{NewWorkspaceTitle}}` with the new title for the Workspace.\n    \n- `{{NewWorkspaceDescription}}` with the new description for this Workspace.\n    \n- `{{NewWorkspaceColor}}` with the desired color to be used by the Workspace tile. Available options:\n    \n    - `D0ABFF`\n        \n    - `FF9797`\n        \n    - `8CBAFF`\n        \n    - `FFE895`\n        \n    - `92D0BA`\n        \n    - `A0A0A0`\n        \n- `{{NewWorkspaceIcon}}` with the desired icon for the Workspace. Available options:\n    \n    - `four-o-clock`\n        \n    - `crescent-moon`\n        \n    - `high-voltage`\n        \n    - `recycle`\n        \n    - `airplane`\n        \n    - `desktop-computer`\n        \n    - `hourglass`\n        \n    - `rocket`\n        \n    - `alembic`\n        \n    - `diamond-dot`\n        \n    - `house`\n        \n    - `round-pushpin`\n        \n    - `anchor`\n        \n    - `direct-hit`\n        \n    - `key`\n        \n    - `scales`\n        \n    - `articulated-lorry`\n        \n    - `electric-light-bulb`\n        \n    - `lady-beetle`\n        \n    - `shield`\n        \n    - `automobile-car`\n        \n    - `electric-plug`\n        \n    - `leaf-fluttering`\n        \n    - `ship`\n        \n    - `banknote-dollar-sign`\n        \n    - `envelope`\n        \n    - `mobile-phone`\n        \n    - `shopping-trolley`\n        \n    - `bar-chart`\n        \n    - `evergreen-tree`\n        \n    - `music-note`\n        \n    - `snowflake`\n        \n    - `beer`\n        \n    - `factory`\n        \n    - `office-building`\n        \n    - `studio-microphone`\n        \n    - `bell`\n        \n    - `floppy-disk`\n        \n    - `package`\n        \n    - `telescope`\n        \n    - `birthday-cake`\n        \n    - `gear`\n        \n    - `page-facing-up`\n        \n    - `tram`\n        \n    - `black-square`\n        \n    - `gem-stone`\n        \n    - `paperclip`\n        \n    - `trophy`\n        \n    - `bomb`\n        \n    - `globe-meridians`\n        \n    - `paw-prints`\n        \n    - `victory-hand`\n        \n    - `briefcase`\n        \n    - `headphone`\n        \n    - `public-address-loudspeaker`\n        \n    - `vulcan-salute`\n        \n    - `broken-heart`\n        \n    - `heart`\n        \n    - `pushpin`\n        \n    - `world-map`\n        \n    - `chart-upwards`\n        \n    - `heavy-dollar-sign`\n        \n    - `racing-motorcycle`"
							},
							"response": []
						},
						{
							"name": "Change Workspace Role",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"role_identifier\": \"{{RoleIdentifier}}\", \r\n    \"user_id\": {{UserID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/workspaces/{{WorkspaceID}}/membership",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"workspaces",
										"{{WorkspaceID}}",
										"membership"
									]
								},
								"description": "Changes a user's Workspace Role.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\n- `{{WorkspaceID}}` with the `id` retrieved through the API with the **Get Workspaces from a Team** endpoint.\n    \n\nReplace in the body:\n\n- `{{UserID}}`with the `id` retrieved using the **Get Team Members** endpoint.\n    \n\n- `{{RoleIdentifier}}`with one of the the `role_identifier` below, wrapped in double quotes:\n    \n\n| **Workspace Role** | **role_identifier** |\n| --- | --- |\n| Workspace Admin | `Admin` |\n| Primary Contributor | `PresetAlpha` |\n| Secondary Contributor | `PresetBeta` |\n| Limited Contributor | `PresetGamma` |\n| Visualization Contributor | `PresetDelta` |\n| Viewer | `PresetReportsOnly` |\n| Dashboard Interactor | `PresetEpsilon` |\n| Dashboard Viewer | `PresetDashboardsOnly` |\n| No Access | `PresetNoAccess` |\n\nEach Role Identifier corresponds to a specific Workspace Role. As a reminder, the access restrictions for each Workspace Role can be found [in our documentation](https://docs.preset.io/docs/data-access-roles-at-preset)."
							},
							"response": []
						},
						{
							"name": "Delete a Workspace from a Team",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/workspaces/{{WorkspaceID}}",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"workspaces",
										"{{WorkspaceID}}"
									]
								},
								"description": "Deletes a specific Workspace from the Team.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n- `{{WorkspaceID}}` with the `id` retrieved through the API with the **Get Workspaces from a Team** endpoint."
							},
							"response": []
						},
						{
							"name": "Delete an Embedded Authentication Key",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pub_key_der\": \"{{PublicKey}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/workspaces/{{WorkspaceSlug}}/access-token-keys/{{KeyID}}",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"workspaces",
										"{{WorkspaceSlug}}",
										"access-token-keys",
										"{{KeyID}}"
									]
								},
								"description": "###### _Requires admin permission._\n\nDeletes an Embedded Authentication token key.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{KeyID}}` with the `id` for the key that should be deleted retrieved through the API (using the **Get all Embedded Authentication Keys** endpoint)."
							},
							"response": []
						}
					],
					"description": "APIs to manage your Workspaces."
				},
				{
					"name": "Permissions",
					"item": [
						{
							"name": "Get Resources",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/permissions/resources",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"permissions",
										"resources"
									],
									"query": [
										{
											"key": "workspace_name",
											"value": "{{WorkspaceSlug}}",
											"description": "*(optional)* Use the name retrieved through the API (using the **Get Workspaces from a Team endpoint**).",
											"disabled": true
										},
										{
											"key": "resource_type",
											"value": "{{ResourceType}}",
											"description": "*(optional)* Filter for the different types:\n* `database`\n* `database_schema`\n* `datasource` *(DAR permission reference of a dataset, not the dataset itself.)*\n* `dataset`\n* `query` *(query to a database, e.g. all_query_access)*.\n* `data_access_role`\n* `row_level_security`",
											"disabled": true
										}
									]
								},
								"description": "###### _Requires Team Admin permission._\n\nList all resources from a team.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\nNote that the query parameters are optional and very useful to retrieve the desired data:\n\n- `workspace_name` can be used to filter for permissions only applied to a particular Workspace.\n- `resource_type` can be used to filter for:\n    - `database` to list databases\n    - `database_schema` to list schemas\n    - `datasource` to list DAR permission reference of a dataset (not the dataset itself)\n    - `dataset` to list datasets\n    - `data_access_role` to list DARs\n    - `row_level_security` to list RLSs"
							},
							"response": []
						},
						{
							"name": "Get Permissions",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/permissions",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"permissions"
									],
									"query": [
										{
											"key": "workspace_name",
											"value": "{{WorkspaceSlug}}",
											"description": "*(optional)* Use the name retrieved through the API (using the **Get Workspaces from a Team** endpoint).",
											"disabled": true
										},
										{
											"key": "permission_type",
											"value": "{{PermissionType}}",
											"description": "*(optional)* Filter for type:\n* `data_access_role`\n* `row_level_security`",
											"disabled": true
										},
										{
											"key": "grantee_identifier",
											"value": "{{GranteeIdentifier}}",
											"description": "*(optional)* Filter for user or DAR: \n* User: `username` of a user if grantee is user\n* Role: `dar:{{DARName}}` if grantee is role",
											"disabled": true
										}
									]
								},
								"description": "###### _Requires Team Admin permission._\n\nList all permissions from a team.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\nNote that the query parameters are optional and very useful to retrieve the desired data:\n\n- `workspace_name` can be used to filter for permissions only applied to a particular Workspace.\n- `permission_type` can be used to filter for only `data_access_role`, or `row_level_security`.\n- `grantee_identifier` can be used to filter for all permissions included in a DAR (`dar:{{DAR NAME}}`), or all permissions applied to a user (`username`)."
							},
							"response": []
						},
						{
							"name": "Create Data Access Role",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"data_access_role\",\n    \"grantees\": [\n        {\n            \"type\": \"USER\",\n            \"identifier\": \"{{Username}}\"\n        }\n    ],\n    \"acl\": {\n        \"dar:{{DARName}}\": {\n            \"config\": {},\n            \"grants\": [\n                {\n                    \"resource\": \"{{ResourceName}}\",\n                    \"action\": \"{{GrantAction}}\"\n                }\n            ]\n        }\n    },\n    \"workspace_name\": \"{{WorkspaceSlug}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/permissions/",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"permissions",
										""
									]
								},
								"description": "###### _Requires Team Admin permission._\n\nCreates a new Data Access Role (DAR).\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\nReplace in the body:\n\n- `{{GranteeType}}`by `USER` if the Grantee is already a member of the workspace, or `INVITEE` if that member's invitation to join the workspace is pending\n- `{{Username}}` by the username of the user if he is already a member of the workspace. You can get a list of usernames with the **Get Team Members API** endpoint. If this user hasn't accepted the invite yet, you can use the email the invite was sent to.\n    \n\n- `{{DARName}}` by the name you want to give your DAR\n- `{{ResourceName}}` by the name of the resource you want your DAR to have acces to. You can see all resources with the **Get Resources** endpoint.\n- `{{GrantAction}}` by the permission action given by the grant. Available options:\n    - `database_access`\n    - `schema_access`\n    - `datasource_access`\n    - `all_database_access`\n    - `all_datasource_access`\n    - `all_query_access`\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n\n_Please note:_\n\n- _**Grantee list for DAR permissions create/update is limited to 1800 Users in Total (API will respond with 400 if over the limit)**_"
							},
							"response": []
						},
						{
							"name": "Create Row Level Security",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"row_level_security\",\n    \"grantees\": [\n        {\n            \"type\": \"ROLE\",\n            \"identifier\": \"{{DARName1}}\"\n        },\n        {\n            \"type\": \"ROLE\",\n            \"identifier\": \"{{DARName2}}\"\n        }\n    ],\n    \"acl\": {\n        \"rls:{{RLSName}}\": {\n            \"config\": {\n                \"clause\": \"{{RLSClause}}\",\n                \"filter_type\": \"{{RLSFilterType}}\",\n                \"group_key\": \"{{RLSGroupKey}}\"\n            },\n            \"grants\": [\n                {\n                    \"resource\": \"{{ResourceName}}\",\n                    \"action\": \"filter\"\n                }\n            ]\n        }\n    },\n    \"workspace_name\": \"{{WorkspaceSlug}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/permissions/",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"permissions",
										""
									]
								},
								"description": "###### _Requires Team Admin permission._\n\nCreates a Row Level Security (RLS).\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\nReplace in the body:\n\n- `{{DARName1}}` with the DAR name you want to associated with this RLS (also for `{{DARName2}}` and so on). You can get a list of availabe DARs using the **Get Permissions** endpoint. Note that you would use the **display name** (without `dar:`).\n- `{{RLSName}}` with the name of your RLS.\n- `{{RLSClause}}` with the SQL syntax for the filter to be applied.\n- `{{RLSFilterType}}` with `Regular` or `Base`.\n- `{{RLSGroupKey}}` with the desired group key.\n- `{{ResourceName}}` with the datasource name. You can get a list of available options using the **Get Resources** endpoint (filtering for `&resource_type=dataset`).\n    \n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n\nPlease note:\n\n- _**Grantee list for RLS permissions create/update is limited to 100 users in total (API will respond with 400 if over the limit)**_"
							},
							"response": []
						},
						{
							"name": "Add Grantees to existing Permission",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"grantees\": [\n        {\n            \"type\": \"{{GranteeType}}\",\n            \"identifier\": \"{{GranteeIdentifier}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/permissions/{{PermissionName}}/grantees",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"permissions",
										"{{PermissionName}}",
										"grantees"
									]
								},
								"description": "###### _Requires Team Admin permission._\n\nAdds Grantee(s) to an existing Permission (DAR or RLS).\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n- `{{PermissionName}}` with the `name` retrieved via the **Get Permissions** API.\n    \n\nReplace in the body:\n\n- `{{GranteeType}}` with:\n    - `USER` to add existing user to DARs.\n    - `INVITEE` to add pending user to DARs\n    - `ROLE` to add DAR to RLS.\n- `{{GranteeIdentifier}}` with:\n    - `username` when adding users to DAR. You can get a list of `usernames` with the **Get Team Members** API. For pending users you can use their email.\n    - `DAR Name` when adding DAR to RLS. You can get a list of availabe DARs using the **Get Permissions** endpoint. Note that you would use the **display name** (without `dar:`).\n\nPlease note:\n\n- _**Max number of grantees to be appended per request is 100.**_\n- _**Duplicate grantees will be ignored.**_"
							},
							"response": []
						},
						{
							"name": "Update Data Access Role",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"grantees\": [\n        {\n            \"type\": \"USER\",\n            \"identifier\": \"{{Username}}\"\n        }\n    ],\n    \"acl\": {\n        \"dar:{{DARName}}\": {\n            \"config\": {},\n            \"grants\": [\n                {\n                    \"resource\": \"{{ResourceName}}\",\n                    \"action\": \"{{GrantAction}}\"\n                }\n            ]\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/permissions/{{PermissionName}}",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"permissions",
										"{{PermissionName}}"
									]
								},
								"description": "###### _Requires Team Admin permission._\n\nUpdates an existing Data Access Role (DAR).\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n- `{{PermissionName}}` with the `name` retrieved via the **Get Permissions** API.\n    \n\nNote that the payload has to be complete - you can't remove the `grantees`. If you just want to add a new user, use the **Add Grantees to existing Permission** endpoint.\n\nReplace in the body:\n\n- `{{GranteeType}}`by `USER` if the Grantee is already a member of the workspace, or `INVITEE` if that member's invitation to join the workspace is pending\n- `{{Username}}` by the username of the user if he is already a member of the workspace. You can get a list of usernames with the **Get Team Members API** endpoint. If this user hasn't accepted the invite yet, you can use the email the invite was sent to.\n    \n\n- `{{DARName}}` by the name you want to give your DAR.\n- `{{ResourceName}}` by the name of the resource you want your DAR to have acces to. You can see all resources with the **Get Resources** endpoint.\n- `{{GrantAction}}` by the permission action given by the grant. Available options:\n    - `database_access`\n    - `schema_access`\n    - `datasource_access`\n    - `all_database_access`\n    - `all_datasource_access`\n    - `all_query_access`\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n\n_Please note:_\n\n- _**Grantee list for DAR permissions create/update is limited to 1800 Users in Total (API will respond with 400 if over the limit)**_"
							},
							"response": []
						},
						{
							"name": "Update Row Level Security",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"row_level_security\",\n    \"grantees\": [\n        {\n            \"type\": \"ROLE\",\n            \"identifier\": \"{{DARName1}}\"\n        },\n        {\n            \"type\": \"ROLE\",\n            \"identifier\": \"{{DARName2}}\"\n        }\n    ],\n    \"acl\": {\n        \"rls:{{RLSName}}\": {\n            \"config\": {\n                \"clause\": \"{{RLSClause}}\",\n                \"filter_type\": \"{{RLSFilterType}}\",\n                \"group_key\": \"{{RLSGroupKey}}\"\n            },\n            \"grants\": [\n                {\n                    \"resource\": \"{{ResourceName}}\",\n                    \"action\": \"filter\"\n                }\n            ]\n        }\n    },\n    \"workspace_name\": \"{{WorkspaceSlug}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/permissions/{{PermissionName}}",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"permissions",
										"{{PermissionName}}"
									]
								},
								"description": "###### _Requires Team Admin permission._\n\nUpdates an existing Row Level Security (RLS).\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n- `{{PermissionName}}` with the `name` retrieved via the **Get Permissions** API.\n    \n\nNote that the payload has to be complete - you can't remove the `grantees`.\n\nReplace in the body:\n\n- `{{DARName1}}` with the DAR name you want to associated with this RLS (also for `{{DARName2}}` and so on). You can get a list of availabe DARs using the **Get Permissions** endpoint. Note that you would use the **display name** (without `dar:`).\n- `{{RLSName}}` with the name of your RLS.\n- `{{RLSClause}}` with the SQL syntax for the filter to be applied.\n- `{{RLSFilterType}}` with `Regular` or `Base`.\n- `{{RLSGroupKey}}` with the desired group key.\n- `{{ResourceName}}` with the datasource name. You can get a list of available options using the **Get Resources** endpoint (filtering for `&resource_type=dataset`).\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n\n_Please note:_\n\n- _**Grantee list for RLS permissions create/update is limited to 100 users in total (API will respond with 400 if over the limit)**_"
							},
							"response": []
						},
						{
							"name": "Delete Data Access Roles",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/permissions/{{PermissionName}}",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"permissions",
										"{{PermissionName}}"
									]
								},
								"description": "###### _Requires Team Admin permission._\n\nDeletes a Data Access Role (DAR).\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n- `{{PermissionName}}` with the `name` retrieved via the **Get Permissions** API."
							},
							"response": []
						},
						{
							"name": "Delete Row Level Security",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/permissions/{{PermissionName}}",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"permissions",
										"{{PermissionName}}"
									]
								},
								"description": "###### _Requires Team Admin permission._\n\nDeletes a Row Level Security (RLS).\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n- `{{PermissionName}}` with the `name` retrieved via the **Get Permissions** API."
							},
							"response": []
						},
						{
							"name": "Delete Grantee from existing Permission",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"grantees\": [\n        {\n            \"type\": \"{{GranteeType}}\",\n            \"identifier\": \"{{GranteeIdentifier}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/permissions/{{PermissionName}}/grantees",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"permissions",
										"{{PermissionName}}",
										"grantees"
									]
								},
								"description": "###### _Requires Team Admin permission._\n\nRemoves Grantee(s) from an existing Permission (DAR or RLS).\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n- `{{PermissionName}}` with the `name` retrieved via the **Get Permissions** API.\n    \n\nReplace in the body:\n\n- `{{GranteeType}}` with:\n    - `USER` to add users to DARs.\n    - `ROLE` to add DAR to RLS.\n- `{{GranteeIdentifier}}` with:\n    - `username` when adding users to DAR. You can get a list of `usernames` with the **Get Team Members** API.\n    - `DAR Name` when adding DAR to RLS. You can get a list of availabe DARs using the **Get Permissions** endpoint. Note that you would use the **display name** (without `dar:`)."
							},
							"response": []
						}
					],
					"description": "APIs to manage permissions on the Workspace level.\n\nNote that all Permission APIs require **Team Admin** permission."
				},
				{
					"name": "Embedded",
					"item": [
						{
							"name": "Get Embedded Configuration for a Dashboard",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}/embedded",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}",
										"embedded"
									]
								},
								"description": "Retrieves the Embedded configuration for a Dashboard using the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DashboardID}}` with the `id` of the desired Dashboard. You can get the `id` using the **Get all Dashboards From a Workspace** endpoint. Alternatively, you can get it from the Dashboard URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/dashboard/{{DashboardID}}`."
							},
							"response": []
						},
						{
							"name": "Create a new Guest Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\":\r\n    {\r\n        \"username\": \"{{username}}\",\r\n        \"first_name\": \"{{firstName}}\",\r\n        \"last_name\": \"{{lastName}}\"\r\n    },\r\n    \"resources\": [\r\n    {\r\n        \"type\": \"dashboard\",\r\n        \"id\": \"{{EmbeddedDashboardID}}\"\r\n    }],\r\n    \"rls\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.app.preset.io/v1/teams/{{TeamSlug}}/workspaces/{{WorkspaceSlug}}/guest-token/",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v1",
										"teams",
										"{{TeamSlug}}",
										"workspaces",
										"{{WorkspaceSlug}}",
										"guest-token",
										""
									]
								},
								"description": "Creates a new Guest Token to be used with Embedded.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\nFor instructions on how to populate the body, refer to [our documentation](https://preset-io.github.io/embedded-beta-docs/v1)."
							},
							"response": []
						},
						{
							"name": "Enable Embedded for a Dashboard",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n \t\"allowed_domains\": [\n         \"{{AllowedDomain}}\"\n     ]\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}/embedded",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}",
										"embedded"
									]
								},
								"description": "Enables Embedded mode for a Dashboard using the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DashboardID}}` with the `id` of the desired Dashboard. You can get the `id` using the **Get all Dashboards From a Workspace** endpoint. Alternatively, you can get it from the Dashboard URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/dashboard/{{DashboardID}}`.\n    \n\nReplace in the body:\n\n- `{{AllowedDomain}}` with the domain that should be allowed to embed this dashboard. Make sure to include the protocol( `https://...`). Multiple values can be added and should be separated with a comma. Alternatively, use an empty array to allow embedding on any domain:\n    \n\n``` json\n{\n    \"allowed_domains\": []\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Update Embedded Configuration for a Dashboard",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n \t\"allowed_domains\": [\n         \"{{AllowedDomain}}\"\n     ]\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}/embedded",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}",
										"embedded"
									]
								},
								"description": "Updates the Embedded Configuration for a Dashboard using the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DashboardID}}` with the `id` of the desired Dashboard. You can get the `id` using the **Get all Dashboards From a Workspace** endpoint. Alternatively, you can get it from the Dashboard URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/dashboard/{{DashboardID}}`.\n    \n\nReplace in the body:\n\n- `{{AllowedDomain}}` with the domain that should be allowed to embed this dashboard. Make sure to include the protocol( `https://...`). Multiple values can be added and should be separated with a comma. Alternatively, use an empty array to allow embedding on any domain:\n    \n\n``` json\n{\n    \"allowed_domains\": []\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Disable Embedded for a Dashboard",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}/embedded",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}",
										"embedded"
									]
								},
								"description": "Disables the Embedded configuration for a Dashboard using the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DashboardID}}` with the `id` of the desired Dashboard. You can get the `id` using the **Get all Dashboards From a Workspace** endpoint. Alternatively, you can get it from the Dashboard URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/dashboard/{{DashboardID}}`."
							},
							"response": []
						}
					],
					"description": "APIs associated with the Embedded functionality."
				},
				{
					"name": "Audit Logs",
					"item": [
						{
							"name": "Query Audit Logs",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v2/audit/teams/{{TeamSlug}}/logs",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v2",
										"audit",
										"teams",
										"{{TeamSlug}}",
										"logs"
									],
									"query": [
										{
											"key": "entity_type",
											"value": "{{EntityType}}",
											"description": "*(optional)* Filter by the type of entity.",
											"disabled": true
										},
										{
											"key": "entity_id",
											"value": "{{EntityID}}",
											"description": "*(optional)* Filter by the entity ID.",
											"disabled": true
										},
										{
											"key": "entity_name",
											"value": "{{EntityName}}",
											"description": "*(optional)* Filter by the entity's friendly name.",
											"disabled": true
										},
										{
											"key": "action",
											"value": "{{ActionURN}}",
											"description": "*(optional)* Filter by the action performed. ",
											"disabled": true
										},
										{
											"key": "user",
											"value": "{{UsernameOREmail}}",
											"description": "*(optional)* Filter by the actor. Accepts either the username or email.",
											"disabled": true
										},
										{
											"key": "start_time",
											"value": "{{StartTime}}",
											"description": "*(optional)* Filter by start time.",
											"disabled": true
										},
										{
											"key": "end_time",
											"value": "{{EndTime}}",
											"description": "*(optional)* Filter by the end time.",
											"disabled": true
										},
										{
											"key": "workspace_name",
											"value": "{{WorkspaceSlug}}",
											"description": "*(optional)* Filter by the Workspace Slug.",
											"disabled": true
										},
										{
											"key": "page_number",
											"value": "{{PageNumber}}",
											"description": "*(optional)* Control the page number for pagination. Starts at 1.",
											"disabled": true
										},
										{
											"key": "page_size",
											"value": "{{PageSize}}",
											"description": "*(optional)* Control the page size. Maximum allowed value (and default) is 100.",
											"disabled": true
										},
										{
											"key": "order_by",
											"value": "{{OrderColumn}}",
											"description": "*(optional)* Control the column to order results.",
											"disabled": true
										},
										{
											"key": "direction",
											"value": "{{SortOption}}",
											"description": "*(optional)* Control the sorting option.",
											"disabled": true
										}
									]
								},
								"description": "Queries the Preset Team's Audit Logs records.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\nNote that the query parameters are optional and very useful to filter for the desired data:\n\n- `entity_type` can be used to filter for logs associated with a particular entity type. Available options:\n    - `urn:preset:auditlog`\n    - `urn:preset:user`\n    - `urn:preset:ws:chart`\n    - `urn:preset:ws:dashboard`\n    - `urn:preset:ws:database`\n    - `urn:preset:ws:dataset`\n- `entity_id` can be used to filter for the unique entity ID (for example, chart ID, dashboard ID, etc).\n- `entity_name` can be used to filter using the friendly name of entity.\n- `action` can be used to filter for specific actions. Use the `action_urn` values retrieved from the **Get Available Actions API** endpoint.\n- `user` can be used to filter for actions performed by a particular user. Either the `username` or `email` can be used.\n- `start_time` and `end_time` can be used to filter by the period. The expected format is `YYYY-MM-DD HH:MM:SS.mm` (for example `2023-08-01 00:00:01.00`).\n- `workspace_name` can be used to filter by actions related to a specific Workspace. Use the name retrieved through the API (using the **Get Workspaces from a Team endpoint**).\n- `page_number` to paginate results. Default/start value is `1`.\n- `page_size` to set a maximum page size. Default/max value is `100`.\n- `order_by` and `direction` to specify the column to be used in the sorting logic, and direction (either `asc` or `desc`)."
							},
							"response": []
						},
						{
							"name": "Get Available Actions",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.app.preset.io/v2/audit/teams/{{TeamSlug}}/logs/actions",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v2",
										"audit",
										"teams",
										"{{TeamSlug}}",
										"logs",
										"actions"
									]
								},
								"description": "Queries the actions logged on the Audit Logs records.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`."
							},
							"response": []
						},
						{
							"name": "Download Audit Logs",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"via_email\": false,\n  \"entity_type\": \"{{EntityType}}\",\n  \"entity_id\": {{EntityID}},\n  \"entity_name\": \"{{EntityName}}\",\n  \"action\": [\"{{ActionURN}}\"],\n  \"user\": \"{{UsernameOREmail}}\",\n  \"start_time\": \"{{StartTime}}\",\n  \"end_time\": \"{{EndTime}}\",\n  \"workspace_name\": [\"{{WorkspaceSlug}}\"],\n  \"page_number\": {{PageNumber}},\n  \"page_size\": {{PageSize}},\n  \"order_by\": \"{{OrderColumn}}\",\n  \"direction\": \"{{SortOption}}\"\n}"
								},
								"url": {
									"raw": "https://api.app.preset.io/v2/audit/teams/{{TeamSlug}}/logs/downloads",
									"protocol": "https",
									"host": [
										"api",
										"app",
										"preset",
										"io"
									],
									"path": [
										"v2",
										"audit",
										"teams",
										"{{TeamSlug}}",
										"logs",
										"downloads"
									]
								},
								"description": "Downloads the Preset Team's Audit Log records.\n\nReplace in the URL:\n\n- `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\nThe `via_email` parameter in the body is required and should be set to `false` so that the report is returned in the API response.\n\nThe remaining information in the body is optional and very useful to filter for the desired data:\n\n- `entity_type` can be used to filter for logs associated with a particular entity type. Available options:\n    - `urn:preset:auditlog`\n        \n    - `urn:preset:user`\n        \n    - `urn:preset:ws:chart`\n        \n    - `urn:preset:ws:dashboard`\n        \n    - `urn:preset:ws:database`\n        \n    - `urn:preset:ws:dataset`\n        \n- `entity_id` can be used to filter for the unique entity ID (for example, chart ID, dashboard ID, etc).\n    \n- `entity_name` can be used to filter using the friendly name of entity.\n    \n- `action` can be used to filter for specific actions. Use the `action_urn` values retrieved from the **Get Available Actions API** endpoint.\n    \n- `user` can be used to filter for actions performed by a particular user. Either the `username` or `email` can be used.\n    \n- `start_time` and `end_time` can be used to filter by the period. The expected format is `YYYY-MM-DD HH:MM:SS.mm` (for example `2023-08-01 00:00:01.00`).\n    \n- `workspace_name` can be used to filter by actions related to a specific Workspace. Use the name retrieved through the API (using the **Get Workspaces from a Team endpoint**).\n    \n- `page_number` to paginate results. Default/start value is `1`.\n    \n- `page_size` to set a maximum page size. Default/max value is `100`.\n    \n- `order_by` and `direction` to specify the column to be used in the sorting logic, and direction (either `asc` or `desc`)."
							},
							"response": []
						}
					],
					"description": "APIs to retrieve Audit Logs.\n\nNote that these APIs require **Team Admin** permission."
				}
			],
			"description": "Use Preset Manager APIs to manage your Team, Workspaces, Embedded configurations and also Permissions."
		},
		{
			"name": "Superset APIs (Open Source)",
			"item": [
				{
					"name": "Alerts & Reports",
					"item": [
						{
							"name": "Get all Alerts and Reports from a Workspace",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/report/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"report",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "(page:0,page_size:100)",
											"description": "*(optional)* Used to control pagination and page size (max page size = 100).",
											"disabled": true
										}
									]
								},
								"description": "Gets all Alerts & Reports created on the Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n ```\n\nReplace:\n\n- `{{PageSize}}` with the desired size (min `1` max `100`).\n    \n- `{{Page}}` with the page number (useful when the total count > `{{PageSize}}` - min `0`)."
							},
							"response": []
						},
						{
							"name": "Get all Alerts from a Workspace",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/report/?q=(filters:!((col:type,opr:eq,value:Alert)),page_size:100,page:0)",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"report",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "(filters:!((col:type,opr:eq,value:Alert)),page_size:100,page:0)",
											"description": "Used to filter results to include only `Alerts`.\nPagination and page size  are also controlled by this parameter (max page size = 100)."
										}
									]
								},
								"description": "Gets all Alerts created on the Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nNote that the response includes a `count` value, indicating the total count of Alerts. 100 alerts would be included on the response - if `count > 100`, you can access the remaining items by increasing the `page` value on the `q` parameter:\n\n```\n?q=(filters:!((col:type,opr:eq,value:Alert)),page_size:{{PageSize}},page:{{Page}})\n\n ```"
							},
							"response": []
						},
						{
							"name": "Get all Reports from a Workspace",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/report/?q=(filters:!((col:type,opr:eq,value:Report)),page_size:100,page:0)",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"report",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "(filters:!((col:type,opr:eq,value:Report)),page_size:100,page:0)",
											"description": "Used to filter results to include only `Reports`.\nPagination and page size  are also controlled by this parameter (max page size = 100)."
										}
									]
								},
								"description": "Gets all Reports created on the Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nNote that the response includes a `count` value, indicating the total count of Alerts. 100 alerts would be included on the response - if `count > 100`, you can access the remaining items by increasing the `page` value on the `q` parameter:\n\n```\n?q=(filters:!((col:type,opr:eq,value:Report)),page_size:{{PageSize}},page:{{Page}})\n\n ```"
							},
							"response": []
						},
						{
							"name": "Get an Alert/Report",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/report/{{AlertID OR ReportID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"report",
										"{{AlertID OR ReportID}}"
									]
								},
								"description": "Gets a specific Alert/Report from the Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{AlertID OR ReportID}}` with the `id` retrieved from one of the endpoints below:\n    \n    - **Get all Alerts and Reports from a Workspace**\n        \n    - **Get all Alerts from a Workspace**\n        \n    - **Get all Reports from a Workspace**"
							},
							"response": []
						},
						{
							"name": "Get Alerts & Reports API metadata Info",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/report/_info",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"report",
										"_info"
									]
								},
								"description": "Gets metadata information about the Alerts & Reports API endpoints.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`."
							},
							"response": []
						},
						{
							"name": "Get all Slack Channel IDs",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/report/slack_channels/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"report",
										"slack_channels",
										""
									]
								},
								"description": "Gets all Slack Channel IDs from the connected Slack Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`."
							},
							"response": []
						},
						{
							"name": "Create a Chart Report",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"active\": {{ActiveBooleanFlag}},\n    \"creation_method\": \"alerts_reports\",\n    \"type\": \"Report\",\n    \"name\": \"{{ReportName}}\",\n    \"chart\": {{ChartID}},\n    \"description\": \"{{ReportDescription}}\",\n    \"crontab\": \"{{CRONSchedule}}\",\n    \"timezone\": \"{{Timezone}}\",\n    \"force_screenshot\": {{ForceBooleanFlag}},\n    \"report_format\": \"{{ReportFormat}}\",\n    \"owners\": [\n        {{OwnerID}}\n    ],\n    \"recipients\": [\n        {\n            \"type\": \"{{ReportType}}\",\n            \"recipient_config_json\": {\n                \"target\": \"{{TargetInfo}}\"\n            }\n        }\n    ],\n    \"custom_width\": {{CustomWidth}},\n    \"log_retention\": {{LogRetention}},\n    \"working_timeout\": {{WorkingTimeout}},\n    \"grace_period\": {{GracePeriod}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/report/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"report",
										""
									]
								},
								"description": "Creates a Chart Report on the Workspace through the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace in the body:\n\n- `{{ActiveBooleanFlag}}` with:\n    \n    - **true** to create it enabled.\n        \n    - **false** to create it disabled.\n        \n- `{{ReportName}}` with a name for your report.\n    \n- `{{ChartID}}` with the `id` of the desired Chart, retrieved using the **Get all Charts from a Workspace** endpoint.\n    \n- `{{ReportDescription}}` with a description for it.\n    \n- `{{CRONSchedule}}` with the desired frequency (in [cron](https://en.wikipedia.org/wiki/Cron)).\n    \n- `{{Timezone}}` with the desired timezone. The list of valid options can be retrieved using the **Get Alerts & Reports API metadata Info** endpoint.\n    \n- `{{ForceBooleanFlag}}` with:\n    \n    - **true** to ignore cache.\n        \n    - **false** to use cache if available.\n        \n- `{{ReportFormat}}` with either `CSV`, `PNG`, or `TEXT` (`TEXT` can only be used with Table Charts).\n    \n- For the `owners` field:\n    \n    - Replace `{{OwnerID}}` with the owner's account ID on the Workspace level (you can retrieve this ID using the **Get all possible Chart Owners** endpoint).\n        \n    - This field is an array, so multiple owners can be added, separated by comma.\n        \n- For the `recipients` field:\n    \n    - Replace `{{ReportType}}` with `Email` or `SlackV2`.\n        \n    - `{{TargetInfo}}` with the email address/Slack channel ID.\n        \n    - This field is an array, so multiple recipient configuration can be added (comma separated).\n        \n- `{{CustomWidth}}` _(optional)_ can be used to set the screenshot width in pixels.\n    \n- `{{LogRetention}}` with the retention period (in days). Default and max value is `90`_._\n    \n- `{{WorkingTimeout}}` with time out settings (in seconds). Default value is `3600`.\n    \n- `{{GracePeriod}}` with a grace period (in seconds). Default value is `14400`."
							},
							"response": []
						},
						{
							"name": "Create a Dashboard Report",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"active\": {{ActiveBooleanFlag}},\n    \"creation_method\": \"alerts_reports\",\n    \"type\": \"Report\",\n    \"name\": \"{{ReportName}}\",\n    \"dashboard\": {{DashboardID}},\n    \"description\": \"{{ReportDescription}}\",\n    \"crontab\": \"{{CRONSchedule}}\",\n    \"timezone\": \"{{Timezone}}\",\n    \"force_screenshot\": {{ForceBooleanFlag}},\n    \"report_format\": \"PNG\",\n    \"owners\": [\n        {{OwnerID}}\n    ],\n    \"recipients\": [\n        {\n            \"type\": \"{{ReportType}}\",\n            \"recipient_config_json\": {\n                \"target\": \"{{TargetInfo}}\"\n            }\n        }\n    ],\n    \"custom_width\": {{CustomWidth}},\n    \"log_retention\": {{LogRetention}},\n    \"working_timeout\": {{WorkingTimeout}},\n    \"grace_period\": {{GracePeriod}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/report/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"report",
										""
									]
								},
								"description": "Creates a Dashboard Report on the Workspace through the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace in the body:\n\n- `{{ActiveBooleanFlag}}` with:\n    \n    - **true** to create it enabled.\n        \n    - **false** to create it disabled.\n        \n- `{{ReportName}}` with a name for your report.\n    \n- `{{DashboardID}}` with the `id` of the desired Dashboard, retrieved using the **Get all Dashboards from a Workspace** endpoint.\n    \n- `{{ReportDescription}}` with a description for it.\n    \n- `{{CRONSchedule}}` with the desired frequency (in [cron](https://en.wikipedia.org/wiki/Cron)).\n    \n- `{{Timezone}}` with the desired timezone. The list of valid options can be retrieved using the **Get Alerts & Reports API metadata Info** endpoint.\n    \n- `{{ForceBooleanFlag}}` with:\n    \n    - **true** to ignore cache.\n        \n    - **false** to use cache if available.\n        \n- For the `owners` field:\n    \n    - Replace `{{OwnerID}}` with the owner's account ID on the Workspace level (you can retrieve this ID using the **Get all possible Chart Owners** endpoint).\n        \n    - This field is an array, so multiple owners can be added, separated by comma.\n        \n- For the `recipients` field:\n    \n    - Replace `{{ReportType}}` with `Email` or `SlackV2`.\n        \n    - `{{TargetInfo}}` with the email address/Slack channel ID.\n        \n    - This field is an array, so multiple recipient configuration can be added (comma separated).\n        \n- `{{CustomWidth}}` _(optional)_ can be used to set the screenshot width in pixels.\n    \n- `{{LogRetention}}` with the retention period (in days). Default and max value is `90`_._\n    \n- `{{WorkingTimeout}}` with time out settings (in seconds). Default value is `3600`.\n    \n- `{{GracePeriod}}` with a grace period (in seconds). Default value is `14400`."
							},
							"response": []
						},
						{
							"name": "Create a Chart Alert",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"active\": {{ActiveBooleanFlag}},\n    \"creation_method\": \"alerts_reports\",\n    \"type\": \"Alert\",\n    \"name\": \"{{AlertName}}\",\n    \"chart\": {{ChartID}},\n    \"description\": \"{{AlertDescription}}\",\n    \"crontab\": \"{{CRONSchedule}}\",\n    \"timezone\": \"{{Timezone}}\",\n    \"force_screenshot\": {{ForceBooleanFlag}},\n    \"report_format\": \"{{AlertFormat}}\",\n    \"database\": {{DatabaseID}},\n    \"sql\": {{SQLCondition}},\n    \"validator_type\": \"{{ValidatorType}}\",\n    \"validator_config_json\": {\n        \"op\": \"{{Operator}}\",\n        \"threshold\": \"{{Threshold}}\"\n    },\n    \"owners\": [\n        {{OwnerID}}\n    ],\n    \"recipients\": [\n        {\n            \"type\": \"{{AlertType}}\",\n            \"recipient_config_json\": {\n                \"target\": \"{{TargetInfo}}\"\n            }\n        }\n    ],\n    \"custom_width\": {{CustomWidth}},\n    \"log_retention\": {{LogRetention}},\n    \"working_timeout\": {{WorkingTimeout}},\n    \"grace_period\": {{GracePeriod}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/report/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"report",
										""
									]
								},
								"description": "Creates a Chart Alert on the Workspace through the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace in the body:\n\n- `{{ActiveBooleanFlag}}` with:\n    - **true** to create it enabled.\n        \n    - **false** to create it disabled.\n        \n- `{{AlertName}}` with a name for your alert.\n    \n- `{{ChartID}}` with the `id` of the desired Chart, retrieved using the **Get all Charts from a Workspace** endpoint.\n    \n- `{{AlertDescription}}` with a description for it.\n    \n- `{{CRONSchedule}}` with the desired frequency (in [cron](https://en.wikipedia.org/wiki/Cron)).\n    \n- `{{Timezone}}` with the desired timezone. The list of valid options can be retrieved using the **Get Alerts & Reports API metadata Info** endpoint.\n    \n- `{{ForceBooleanFlag}}` with:\n    - **true** to ignore cache.\n        \n    - **false** to use cache if available.\n        \n- `{{AlertFormat}}` with either `CSV`, `PNG`, or `TEXT` (`TEXT` can only be used with Table Charts).\n    \n- `{{DatabaseID}}` with the `id` of the database that should be used to execute the SQL validation. You can retrieve this `id` using the **Get all Database Connections from a Workspace** endpoint.\n    \n- `{{SQLCondition}}` with the SQL query that should be validated by the alert. **Note that the SQL query should return only one column**, for example `select count(\\\\\\\\\\\\\\\\\\*) from {{MyTable}}`.\n    \n- `{{ValidatorType}}` with:\n    - `operator` when performing number comparisson.\n        \n    - `not null` to check if the SQL result is not null. When using `not null`, the `validator_config_json` should be empty:\n        \n\n``` json\n\"validator_type\": \"not null\",\n\"validator_config_json\": {}\n\n ```\n\n- `{{Operator}}` with the operation that should be used to analyze the SQL result. Available options:\n    \n    - `==` to check if SQL result is equal the threshold value.\n        \n    - `<` to check if the SQL result is smaller than the t\n        \n    - the threshold value.\n        \n    - `>` to check if the SQL result is larger than the the threshold value.\n        \n    - `<=` to check if the SQL result is not larger than the the threshold value.\n        \n    - `>=` to check if the SQL result is not smaller than the the threshold value.\n        \n    - `!=` to check if the SQL result is different than the threshold value.\n        \n- `{{Threshold}}` with the condition value.\n    \n- For the `owners` field:\n    \n    - Replace `{{OwnerID}}` with the owner's account ID on the Workspace level (you can retrieve this ID using the **Get all possible Chart Owners** endpoint).\n        \n    - This field is an array, so multiple owners can be added, separated by comma.\n        \n- For the `recipients` field:\n    \n    - Replace `{{AlertType}}` with `Email` or `SlackV2`.\n        \n    - `{{TargetInfo}}` with the email address/Slack channel ID.\n        \n    - This field is an array, so multiple recipient configuration can be added (comma separated).\n        \n- `{{CustomWidth}}` _(optional)_ can be used to set the screenshot width in pixels.\n    \n- `{{LogRetention}}` with the retention period (in days). Default and max value is `90`_._\n    \n- `{{WorkingTimeout}}` with time out settings (in seconds). Default value is `3600`.\n    \n- `{{GracePeriod}}` with a grace period (in seconds). Default value is `14400`."
							},
							"response": []
						},
						{
							"name": "Create a Dashboard Alert",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"active\": {{ActiveBooleanFlag}},\n    \"creation_method\": \"alerts_reports\",\n    \"type\": \"Alert\",\n    \"name\": \"{{AlertName}}\",\n    \"dashboard\": {{DashboardID}},\n    \"description\": \"{{AlertDescription}}\",\n    \"crontab\": \"{{CRONSchedule}}\",\n    \"timezone\": \"{{Timezone}}\",\n    \"force_screenshot\": {{ForceBooleanFlag}},\n    \"report_format\": \"PNG\",\n    \"database\": {{DatabaseID}},\n    \"sql\": {{SQLCondition}},\n    \"validator_type\": \"{{ValidatorType}}\",\n    \"validator_config_json\": {\n        \"op\": \"{{Operator}}\",\n        \"threshold\": \"{{Threshold}}\"\n    },\n    \"owners\": [\n        {{OwnerID}}\n    ],\n    \"recipients\": [\n        {\n            \"type\": \"{{AlertType}}\",\n            \"recipient_config_json\": {\n                \"target\": \"{{TargetInfo}}\"\n            }\n        }\n    ],\n    \"custom_width\": {{CustomWidth}},\n    \"log_retention\": {{LogRetention}},\n    \"working_timeout\": {{WorkingTimeout}},\n    \"grace_period\": {{GracePeriod}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/report/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"report",
										""
									]
								},
								"description": "Creates a Dashboard Alert on the Workspace through the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace in the body:\n\n- `{{ActiveBooleanFlag}}` with:\n    - **true** to create it enabled.\n        \n    - **false** to create it disabled.\n        \n- `{{AlertName}}` with a name for your alert.\n    \n- `{{DashboardID}}` with the `id` of the desired Dashboard, retrieved using the **Get all Dashboards from a Workspace** endpoint.\n    \n- `{{AlertDescription}}` with a description for it.\n    \n- `{{CRONSchedule}}` with the desired frequency (in [cron](https://en.wikipedia.org/wiki/Cron)).\n    \n- `{{Timezone}}` with the desired timezone. The list of valid options can be retrieved using the **Get Alerts & Reports API metadata Info** endpoint.\n    \n- `{{ForceBooleanFlag}}` with:\n    - **true** to ignore cache.\n        \n    - **false** to use cache if available.\n        \n- `{{DatabaseID}}` with the `id` of the database that should be used to execute the SQL validation. You can retrieve this `id` using the **Get all Database Connections from a Workspace** endpoint.\n    \n- `{{SQLCondition}}` with the SQL query that should be validated by the alert. **Note that the SQL query should return only one column**, for example `select count(\\\\\\\\\\\\\\\\\\\\*) from {{MyTable}}`.\n    \n- `{{ValidatorType}}` with:\n    - `operator` when performing number comparisson.\n        \n    - `not null` to check if the SQL result is not null. When using `not null`, the `validator_config_json` should be empty:\n        \n\n``` json\n\"validator_type\": \"not null\",\n\"validator_config_json\": {}\n\n ```\n\n- `{{Operator}}` with the operation that should be used to analyze the SQL result. Available options:\n    \n    - `==` to check if SQL result is equal the threshold value.\n        \n    - `<` to check if the SQL result is smaller than the t\n        \n    - the threshold value.\n        \n    - `>` to check if the SQL result is larger than the the threshold value.\n        \n    - `<=` to check if the SQL result is not larger than the the threshold value.\n        \n    - `>=` to check if the SQL result is not smaller than the the threshold value.\n        \n    - `!=` to check if the SQL result is different than the threshold value.\n        \n- `{{Threshold}}` with the condition value.\n    \n- For the `owners` field:\n    \n    - Replace `{{OwnerID}}` with the owner's account ID on the Workspace level (you can retrieve this ID using the **Get all possible Chart Owners** endpoint).\n        \n    - This field is an array, so multiple owners can be added, separated by comma.\n        \n- For the `recipients` field:\n    \n    - Replace `{{AlertType}}` with `Email` or `SlackV2`.\n        \n    - `{{TargetInfo}}` with the email address/Slack channel ID.\n        \n    - This field is an array, so multiple recipient configuration can be added (comma separated).\n        \n- `{{CustomWidth}}` _(optional)_ can be used to set the screenshot width in pixels.\n    \n- `{{LogRetention}}` with the retention period (in days). Default and max value is `90`_._\n    \n- `{{WorkingTimeout}}` with time out settings (in seconds). Default value is `3600`.\n    \n- `{{GracePeriod}}` with a grace period (in seconds). Default value is `14400`."
							},
							"response": []
						},
						{
							"name": "Update an Alert/Report",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    //common fields:\n    \"active\": {{ActiveBooleanFlag}},\n    \"creation_method\": \"{{Method}}\", //either `chart`, `dashboard` or `alerts_reports`\n    \"crontab\": \"{{CRONSchedule}}\",\n    \"custom_width\": {{CustomWidth}},\n    \"description\": \"{{Description}}\",\n    \"force_screenshot\": {{ForceBooleanFlag}},\n    \"grace_period\": {{GracePeriod}},\n    \"log_retention\": {{LogRetention}},\n    \"name\": \"{{Name}}\",\n    \"owners\": [\n        {{OwnerID}}\n    ],\n    \"recipients\": [\n        {\n            \"type\": \"{{Type}}\",\n            \"recipient_config_json\": {\n                \"target\": \"{{TargetInfo}}\"\n            }\n        }\n    ],\n    \"report_format\": \"{{Format}}\",\n    \"timezone\": \"{{Timezone}}\",\n    \"working_timeout\": {{WorkingTimeout}},\n    \"type\": \"{{Type}}\", // either `Alert` or `Report`\n\n    //include either the `chart` or `dashboard` configuration\n    \"chart\": {{ChartID}}, //when configured to send a chart\n    \"dashboard\": {{DashboardID}}, //when configured to send a dashboard\n    \n    //alert-specific fields:\n    \"database\": {{DatabaseID}},\n    \"sql\": {{SQLCondition}},\n    \"validator_type\": \"{{ValidatorType}}\",\n    \"validator_config_json\": {\n        \"op\": \"{{Operator}}\",\n        \"threshold\": \"{{Threshold}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/report/{{AlertID OR ReportID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"report",
										"{{AlertID OR ReportID}}"
									]
								},
								"description": "Updates an specific Alert/Report from the Workspace.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{AlertID OR ReportID}}` with the `id` retrieved from one of the endpoints below:\n    - **Get all Alerts and Reports from a Workspace**\n    - **Get all Alerts from a Workspace**\n    - **Get all Reports from a Workspace**\n\nUpdate the body accordingly, keeping only the fields that should be updated. Refer to the **Create a Chart Report**, **Create a Dashboard Report**, **Create a Chart Alert** and **Create a Dashboard Alert** endpoints documentation for further details on how to configure each field.\n\nSome examples:\n\n- To enable an alert/report, include only `active` in the payload set to `true` (to enable it) or `false` (to disable it).\n- To update the alert/report schedule, include only the `crontab` in the payload with the new CRON schedule configuration string."
							},
							"response": []
						},
						{
							"name": "Delete an Alert/Report",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/report/{{AlertID OR ReportID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"report",
										"{{AlertID OR ReportID}}"
									]
								},
								"description": "Deletes an Alert/Report from the Workspace.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{AlertID OR ReportID}}` with the `id` retrieved from one of the endpoints below:\n    \n    - **Get all Alerts and Reports from a Workspace**\n        \n    - **Get all Alerts from a Workspace**\n        \n    - **Get all Reports from a Workspace**"
							},
							"response": []
						}
					],
					"description": "APIs to manage your Alerts & Reports."
				},
				{
					"name": "Annotation Layers",
					"item": [
						{
							"name": "Get all Annotation Layers from a Workspace",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/annotation_layer/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"annotation_layer",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "(page:0,page_size:100)",
											"description": "*(optional)* Used to control pagination and page size (max page size = 100).",
											"disabled": true
										}
									]
								},
								"description": "Gets all Annotation Layers from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n ```\n\nReplace:\n\n- `{{PageSize}}` with the desired size (min `1` max `100`).\n    \n- `{{Page}}` with the page number (useful when the total count > `{{PageSize}}` - min `0`)."
							},
							"response": []
						},
						{
							"name": "Get an Annotation Layer",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/annotation_layer/{{AnnotationLayerID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"annotation_layer",
										"{{AnnotationLayerID}}"
									]
								},
								"description": "Gets a specific Annotation Layer from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from the **Get all Annotation Layers from a Workspace** endpoint."
							},
							"response": []
						},
						{
							"name": "Get all Annotations from an Annotation Layer",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/annotation_layer/{{AnnotationLayerID}}/annotation",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"annotation_layer",
										"{{AnnotationLayerID}}",
										"annotation"
									],
									"query": [
										{
											"key": "q",
											"value": "(page:0,page_size:100)",
											"description": "*(optional)* Used to control pagination and page size (max page size = 100).",
											"disabled": true
										}
									]
								},
								"description": "Gets all Annotations from a specific Annotation Layer.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from the **Get All Annotation Layers from a Workspace** endpoint.\n    \n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n ```\n\nReplace:\n\n- `{{PageSize}}` with the desired size (min `1` max `100`).\n    \n- `{{Page}}` with the page number (useful when the total count > `{{PageSize}}` - min `0`)."
							},
							"response": []
						},
						{
							"name": "Get an Annotation from an Annotation Layer",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/annotation_layer/{{AnnotationLayerID}}/annotation/{{AnnotationID}}",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"annotation_layer",
										"{{AnnotationLayerID}}",
										"annotation",
										"{{AnnotationID}}"
									]
								},
								"description": "Deletes an Annotation Layer through the API.\n\n**Note:** You can only delete an Annotation Layer, after deleting **all its Annotations**.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from the **Get all Annotation Layers from a Workspace** endpoint.\n    \n- `{{AnnotationID}}` with the Annotation `id` retrieved from the **Get all Annotations from an Annotation Layer** endpoint."
							},
							"response": []
						},
						{
							"name": "Create an Annotation Layer",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"descr\": \"{{AnnotationLayerDescription}}\",\n    \"name\": \"{{AnnotationLayerName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/annotation_layer/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"annotation_layer",
										""
									]
								},
								"description": "Creates an Annotation Layer through the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace in the body:\n\n- `{{AnnotationLayerDescription}}` with a description for the Annotation Layer.\n    \n- `{{AnnotationLayerName}}` with the desired new name."
							},
							"response": []
						},
						{
							"name": "Create an Annotation in an Annotation Layer",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"end_dttm\": \"{{AnnotationEndDTTM}}\",\n  \"json_metadata\": \"\",\n  \"long_descr\": \"{{AnnotationLongDescription}}\",\n  \"short_descr\": \"{{AnnotationTitle}}\",\n  \"start_dttm\": \"{{AnnotationStartDTTM}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/annotation_layer/{{AnnotationLayerID}}/annotation",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"annotation_layer",
										"{{AnnotationLayerID}}",
										"annotation"
									]
								},
								"description": "Creates an Annotation on an existing Annotation Layer through the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from the **Get all Annotation Layers from a Workspace** endpoint.\n    \n\nReplace in the body:\n\n- `{{AnnotationEndDTTM}}` with the annotation's datetime end (`YYYY-MM-DD HH:MM`).\n    \n- `{{AnnotationLongDescription}}` with the annotation's description.\n    \n- `{{AnnotationTitle}}` with a name for it.\n    \n- `{{AnnotationStartDTTM}}` with the annotation's datetime start (`YYYY-MM-DD HH:MM`)."
							},
							"response": []
						},
						{
							"name": "Update an Annotation Layer",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"descr\": \"{{AnnotationLayerDescription}}\",\n    \"name\": \"{{AnnotationLayerName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/annotation_layer/{{AnnotationLayerID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"annotation_layer",
										"{{AnnotationLayerID}}"
									]
								},
								"description": "Updates an Annotation Layer through the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from the **Get all Annotation Layers from a Workspace** endpoint.\n    \n\nReplace in the body:\n\n- `{{AnnotationLayerDescription}}` with a description for the Annotation Layer.\n    \n- `{{AnnotationLayerName}}` with the desired new name."
							},
							"response": []
						},
						{
							"name": "Update an Annotation from an Annotation Layer",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"end_dttm\": \"{{AnnotationEndDTTM}}\",\n  \"json_metadata\": \"\",\n  \"long_descr\": \"{{AnnotationLongDescription}}\",\n  \"short_descr\": \"{{AnnotationTitle}}\",\n  \"start_dttm\": \"{{AnnotationStartDTTM}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/annotation_layer/{{AnnotationLayerID}}/annotation/{{AnnotationID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"annotation_layer",
										"{{AnnotationLayerID}}",
										"annotation",
										"{{AnnotationID}}"
									]
								},
								"description": "Updates an Annotation from an Annotation Layer through the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from the **Get all Annotation Layers from a Workspace** endpoint.\n    \n- `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from the **Get all Annotation Layers from a Workspace** endpoint.\n    \n\nReplace in the body:\n\n- `{{AnnotationEndDTTM}}` with the annotation's datetime end (`YYYY-MM-DD HH:MM`).\n    \n- `{{AnnotationLongDescription}}` with the annotation's description.\n    \n- `{{AnnotationShortDescription}}` with a name for it.\n    \n- `{{AnnotationStartDTTM}}` with the annotation's datetime start (`YYYY-MM-DD HH:MM`)."
							},
							"response": []
						},
						{
							"name": "Delete an Annotation from an Annotation Layer",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/annotation_layer/{{AnnotationLayerID}}/annotation/{{AnnotationID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"annotation_layer",
										"{{AnnotationLayerID}}",
										"annotation",
										"{{AnnotationID}}"
									]
								},
								"description": "Deletes an Annotation from an Annotation Layer through the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from the **Get all Annotation Layers from a Workspace** endpoint.\n    \n- `{{AnnotationID}}` with the Annotation `id` retrieved from the **Get all Annotations from an Annotation Layer** endpoint."
							},
							"response": []
						},
						{
							"name": "Delete multiple Annotations from an Annotation Layer",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/annotation_layer/{{AnnotationLayerID}}/annotation/?q=!({{AnnotationIDs}})",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"annotation_layer",
										"{{AnnotationLayerID}}",
										"annotation",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "!({{AnnotationIDs}})",
											"description": "Comma separated list of Annotation IDs."
										}
									]
								},
								"description": "Deletes multiple Annotations from an Annotation Layer through the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from the **Get all Annotation Layers from a Workspace** endpoint.\n    \n- `{{AnnotationIDs}` with comma separated Annotation `ids` retrieved from the **Get all Annotations from an Annotation Layer** endpoint."
							},
							"response": []
						},
						{
							"name": "Delete an Annotation Layer",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/annotation_layer/{{AnnotationLayerID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"annotation_layer",
										"{{AnnotationLayerID}}"
									]
								},
								"description": "Deletes an Annotation Layer through the API.\n\n**Note:** You can only delete an Annotation Layer, after deleting **all its Annotations**.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from the **Get all Annotation Layers from a Workspace** endpoint."
							},
							"response": []
						},
						{
							"name": "Delete multiple Annotations Layers",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/annotation_layer/?q=!({{AnnotationLayerIDs}})",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"annotation_layer",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "!({{AnnotationLayerIDs}})",
											"description": "Comma separated list of Annotation Layer IDs."
										}
									]
								},
								"description": "Deletes multiple Annotations from an Annotation Layer through the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from the **Get all Annotation Layers from a Workspace** endpoint.\n    \n- `{{AnnotationLayerIDs}` with comma separated Annotation Layer `ids` retrieved from the **Get all Annotation Layers from a Workspace** endpoint."
							},
							"response": []
						}
					],
					"description": "API to manage your Annotation Layers."
				},
				{
					"name": "Assets",
					"item": [
						{
							"name": "Export Assets",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/zip",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/assets/export/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"assets",
										"export",
										""
									]
								},
								"description": "Generates and export a ZIP file from the Workspace containing all:\n\n- Databases\n- Datasets\n- Charts\n- Dashboards\n- Saved Queries\n    \n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n_**Tip:**_ If used in Postman, select `Save Response` and `Save to a File` to get the zip export."
							},
							"response": []
						},
						{
							"name": "Import Assets",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data;",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bundle",
											"type": "file",
											"src": []
										},
										{
											"key": "passwords",
											"value": "{\"databases/{{DatabaseYAMLFile}}\": \"{{DatabasePassword}}\"}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/assets/import/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"assets",
										"import",
										""
									]
								},
								"description": "Imports an `assets` ZIP file.\n\nReplace in the URL and in the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace in the body:\n\n- `{{DatabaseYAMLFile}}` by the database YAML File you can find in your chart export under the folder `Databases`.\n    \n- `{{DatabasePassword}}` by your database password\n    \n- Chose your Chart Export Zip file as a value for the `formData`."
							},
							"response": []
						}
					],
					"description": "APIs to export/import an `assets` ZIP file from the Workspace, which includes all:\n\n*   databases.\n*   datasets.\n*   charts.\n*   saved queries."
				},
				{
					"name": "Charts",
					"item": [
						{
							"name": "Get all Charts from a Workspace",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/chart/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"chart",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "(page:0,page_size:100)",
											"description": "*(optional)* Used to control pagination and page size (max page size = 100).",
											"disabled": true
										}
									]
								},
								"description": "Gets all Charts from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n ```\n\nReplace:\n\n- `{{PageSize}}` with the desired size (min `1` max `100`).\n    \n- `{{Page}}` with the page number (useful when the total count > `{{PageSize}}` - min `0`)."
							},
							"response": []
						},
						{
							"name": "Get a Chart",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/chart/{{ChartID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"chart",
										"{{ChartID}}"
									]
								},
								"description": "Gets a specific Chart from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{ChartID}}` with the chart `id` retrieved from the  \n    **Get all Charts from a Workspace** endpoint."
							},
							"response": []
						},
						{
							"name": "Get Chart's Data",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/chart/{{ChartID}}/data",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"chart",
										"{{ChartID}}",
										"data"
									]
								},
								"description": "Gets Chart's data from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{ChartID}}` with the chart `id` retrieved from the **Get all Charts from a Workspace** endpoint."
							},
							"response": []
						},
						{
							"name": "Get all possible Chart Owners",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/chart/related/owners",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"chart",
										"related",
										"owners"
									],
									"query": [
										{
											"key": "q",
											"value": "(page:0,page_size:100)",
											"description": "*(optional)* Used to control pagination and page size (max page size = 100).",
											"disabled": true
										}
									]
								},
								"description": "Gets all possible Chart owners on the Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n ```\n\nReplace:\n\n- `{{PageSize}}` with the desired size (min `1` max `100`).\n    \n- `{{Page}}` with the page number (useful when the total count > `{{PageSize}}` - min `0`)."
							},
							"response": []
						},
						{
							"name": "Generate a Chart Screenshot",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/chart/{{ChartID}}/cache_screenshot/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"chart",
										"{{ChartID}}",
										"cache_screenshot",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "(force:!t)",
											"description": "*(optional) Refresh the screenshot (Bypass cache)*",
											"disabled": true
										}
									]
								},
								"description": "Generates a chart screenshot.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{ChartID}}` with the `id` retrieved from the **Get all Charts from a Workspace** endpoint.\n    \n\nA `force` query parameter can be used to force refresh the data before taking the screenshot.\n\nThe screenshot generation is processed in async mode. The API response includes a `task_status` and a `task_updated_at` timestamp that can be used to track progress, along with the `image_url` that can be used to download the file. Possible `task_status` values:\n\n- `Pending`: screenshot is awaiting to be processed.\n    \n- `Computing`: screenshot job has been picked up by the Celery worker and is being processed.\n    \n- `Updated`: screenshot has been processed and is available at the `image_url`.\n    \n- `Error`: an error occurred while processing the task."
							},
							"response": []
						},
						{
							"name": "Export Charts",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "default"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/zip",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/chart/export/?q=!({{ChartIDs}})",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"chart",
										"export",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "!({{ChartIDs}})",
											"description": "Comma separated list of Chart IDs."
										}
									]
								},
								"description": "Exports Charts.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{ChartIDs}` with comma separated chart `ids` retrieved from the **Get all Charts from a Workspace** endpoint.\n    \n\n_**Tip:**_ If used in Postman, select `Save Response` and `Save to a File` to get the zip export."
							},
							"response": []
						},
						{
							"name": "Create a Chart",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"cache_timeout\": null,\n        \"certification_details\": null,\n        \"certified_by\": null,\n        \"dashboards\": [8],\n        \"description\": null,\n        \"is_managed_externally\": false,\n        \"owners\": [],\n        \"params\": \"{\\\"adhoc_filters\\\": [], \\\"color_scheme\\\": \\\"supersetColors\\\", \\\"datasource\\\": \\\"21__table\\\", \\\"granularity_sqla\\\": \\\"year\\\", \\\"groupby\\\": [\\\"platform\\\"], \\\"label_colors\\\": {\\\"2600\\\": \\\"#D1C6BC\\\", \\\"3DO\\\": \\\"#A38F79\\\", \\\"3DS\\\": \\\"#B2B2B2\\\", \\\"Action\\\": \\\"#ACE1C4\\\", \\\"Adventure\\\": \\\"#5AC189\\\", \\\"COUNT(*)\\\": \\\"#1FA8C9\\\", \\\"DC\\\": \\\"#666666\\\", \\\"DS\\\": \\\"#E04355\\\", \\\"Fighting\\\": \\\"#D1C6BC\\\", \\\"GB\\\": \\\"#A1A6BD\\\", \\\"GBA\\\": \\\"#A868B7\\\", \\\"GC\\\": \\\"#D3B3DA\\\", \\\"GEN\\\": \\\"#FF7F44\\\", \\\"GG\\\": \\\"#8FD3E4\\\", \\\"Microsoft Game Studios\\\": \\\"#FCC700\\\", \\\"Misc\\\": \\\"#D3B3DA\\\", \\\"N64\\\": \\\"#EFA1AA\\\", \\\"NES\\\": \\\"#FEC0A1\\\", \\\"NG\\\": \\\"#FCC700\\\", \\\"Nintendo\\\": \\\"#666666\\\", \\\"PC\\\": \\\"#8FD3E4\\\", \\\"PCFX\\\": \\\"#A1A6BD\\\", \\\"PS\\\": \\\"#FCC700\\\", \\\"PS2\\\": \\\"#454E7C\\\", \\\"PS3\\\": \\\"#FF7F44\\\", \\\"PS4\\\": \\\"#A38F79\\\", \\\"PSP\\\": \\\"#3CCCCB\\\", \\\"PSV\\\": \\\"#454E7C\\\", \\\"Platform\\\": \\\"#FDE380\\\", \\\"Puzzle\\\": \\\"#454E7C\\\", \\\"Racing\\\": \\\"#9EE5E5\\\", \\\"Role-Playing\\\": \\\"#EFA1AA\\\", \\\"SAT\\\": \\\"#5AC189\\\", \\\"SCD\\\": \\\"#E04355\\\", \\\"SNES\\\": \\\"#FDE380\\\", \\\"Shooter\\\": \\\"#B2B2B2\\\", \\\"Simulation\\\": \\\"#1FA8C9\\\", \\\"Sports\\\": \\\"#FEC0A1\\\", \\\"Strategy\\\": \\\"#FF7F44\\\", \\\"TG16\\\": \\\"#3CCCCB\\\", \\\"Take-Two Interactive\\\": \\\"#E04355\\\", \\\"WS\\\": \\\"#A868B7\\\", \\\"Wii\\\": \\\"#666666\\\", \\\"WiiU\\\": \\\"#1FA8C9\\\", \\\"X360\\\": \\\"#5AC189\\\", \\\"XB\\\": \\\"#ACE1C4\\\", \\\"XOne\\\": \\\"#9EE5E5\\\"}, \\\"metrics\\\": [\\\"count\\\"], \\\"number_format\\\": \\\"SMART_NUMBER\\\", \\\"queryFields\\\": {\\\"groupby\\\": \\\"groupby\\\", \\\"metrics\\\": \\\"metrics\\\"}, \\\"row_limit\\\": 10, \\\"slice_id\\\": 661, \\\"time_range\\\": \\\"No filter\\\", \\\"time_range_endpoints\\\": [\\\"inclusive\\\", \\\"exclusive\\\"], \\\"treemap_ratio\\\": 1.618033988749895, \\\"url_params\\\": {}, \\\"viz_type\\\": \\\"treemap\\\"}\",\n        \"query_context\": null,\n        \"slice_name\": \"Test API Created Chart 2\",\n        \"viz_type\": \"treemap\",\n        \"datasource_id\": 2,\n        \"datasource_type\": \"table\"\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/chart",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"chart"
									]
								},
								"description": "Creates a Chart through the API.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace in the body:\n\n- `cache_timeout` (optional) by the chart timeout in seconds.\n    \n- `certification_details` (optional) by the details of certification.\n    \n- `certified_by` (optional) by the certifier.\n    \n- `dashboards` by a comma separated list (csl) of dashboard ids the chart should be added to (can be empty).\n    \n- `description` (optional) by your description.\n    \n- `is_managed_externally` by true or false.\n    \n- `owners` by a csl of owner ids.\n    \n- `params` by a string of all parameters need to define your chart. You can get an example of this either by checking the network tab by creating a chart in the UI or by calling the **Get a Chart** endpoint.\n    \n- `slice_name` by the name you want to give to your chart.\n    \n- `viz_type` by the visualization type. You can find this with the **Get a Chart** endpoint for a similar chart.\n    \n- `datasource_id` by the id of the dataset powering your chart.\n    \n- `datasource_type` by the type of the underlying dataset."
							},
							"response": []
						},
						{
							"name": "Refresh a Chart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"datasource\": {\n        \"id\": \"{{DatasetID}}\",\n        \"type\": \"{{DatasetType}}\"\n    },\n    \"force\": true,\n    \"queries\": [],\n    \"form_data\": {\n        \"datasource\": \"{{DatasetID}}__{{DatasetType}}\",\n        \"viz_type\": \"{{VisualizationType}}\",\n        \"groupby\": [],\n        \"temporal_columns_lookup\": {},\n        \"metrics\": [],\n        \"all_columns\": [],\n        \"percent_metrics\": [],\n        \"adhoc_filters\": [\n            {}\n        ],\n        \"order_by_cols\": [],\n        \"row_limit\": {{RowLimit}},\n        \"order_desc\": true,\n        \"extra_form_data\": {},\n        \"dashboards\": [],\n        \"force\": true,\n        \"result_format\": \"json\",\n        \"result_type\": \"full\"\n    },\n    \"result_format\": \"json\",\n    \"result_type\": \"full\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/chart/data?slice_id={{ChartID}}&force=true ",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"chart",
										"data"
									],
									"query": [
										{
											"key": "slice_id",
											"value": "{{ChartID}}",
											"description": "ID of the Chart to be refreshed."
										},
										{
											"key": "force",
											"value": "true ",
											"description": "Flag to force refresh data. "
										}
									]
								},
								"description": "Refreshes the Chart data.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{ChartID}}` with the `id` retrieved from the **Get all Charts from a Workspace** endpoint.\n    \n\nThe body payload can vary depending on the **visualization type** used and also the **chart configuration**, The easiest way to get the accurate payload is retrieving the `query_context` data from the **Get a Chart** endpoint, and then set `force` to `true` both in the top level and also inside `form_data`."
							},
							"response": []
						},
						{
							"name": "Import a Chart",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data;",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "formData",
											"type": "file",
											"src": []
										},
										{
											"key": "passwords",
											"value": "{\"databases/{{DatabaseYAMLFile}}\": \"{{DatabasePassword}}\"}",
											"type": "text"
										},
										{
											"key": "overwrite",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/chart/import/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"chart",
										"import",
										""
									]
								},
								"description": "Imports a Chart via the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nIn the body:\n\n- Select your Chart ZIP file as a value for the `formData`.\n    \n- For the `passwords` field:\n    \n    - If the Database used by the Chart doesn't exist on the destination Workspace yet:\n        \n        - Replace `{{DatabaseYAMLFile}}` by the database YAML file name. You can find it in your Chart export file, under the `databases` folder.\n            \n        - Replace `{{DatabasePassword}}` by your DB password.\n            \n    - If the Database already exists on the destination Workspace, you can remove this field from the body.\n        \n- For the `overwrite` field:\n    \n    - If the Chart already exists on the destination Workspace, set it as `true` to overwrite it.\n        \n    - If the Chart doesn't exist in there yet, you can remove this field from the body."
							},
							"response": []
						},
						{
							"name": "Update a Chart",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"cache_timeout\": null,\r\n        \"certification_details\": null,\r\n        \"certified_by\": null,\r\n        \"dashboards\": [8],\r\n        \"description\": null,\r\n        \"is_managed_externally\": false,\r\n        \"owners\": [],\r\n        \"params\": \"{\\\"adhoc_filters\\\": [], \\\"color_scheme\\\": \\\"supersetColors\\\", \\\"datasource\\\": \\\"21__table\\\", \\\"granularity_sqla\\\": \\\"year\\\", \\\"groupby\\\": [\\\"platform\\\"], \\\"label_colors\\\": {\\\"2600\\\": \\\"#D1C6BC\\\", \\\"3DO\\\": \\\"#A38F79\\\", \\\"3DS\\\": \\\"#B2B2B2\\\", \\\"Action\\\": \\\"#ACE1C4\\\", \\\"Adventure\\\": \\\"#5AC189\\\", \\\"COUNT(*)\\\": \\\"#1FA8C9\\\", \\\"DC\\\": \\\"#666666\\\", \\\"DS\\\": \\\"#E04355\\\", \\\"Fighting\\\": \\\"#D1C6BC\\\", \\\"GB\\\": \\\"#A1A6BD\\\", \\\"GBA\\\": \\\"#A868B7\\\", \\\"GC\\\": \\\"#D3B3DA\\\", \\\"GEN\\\": \\\"#FF7F44\\\", \\\"GG\\\": \\\"#8FD3E4\\\", \\\"Microsoft Game Studios\\\": \\\"#FCC700\\\", \\\"Misc\\\": \\\"#D3B3DA\\\", \\\"N64\\\": \\\"#EFA1AA\\\", \\\"NES\\\": \\\"#FEC0A1\\\", \\\"NG\\\": \\\"#FCC700\\\", \\\"Nintendo\\\": \\\"#666666\\\", \\\"PC\\\": \\\"#8FD3E4\\\", \\\"PCFX\\\": \\\"#A1A6BD\\\", \\\"PS\\\": \\\"#FCC700\\\", \\\"PS2\\\": \\\"#454E7C\\\", \\\"PS3\\\": \\\"#FF7F44\\\", \\\"PS4\\\": \\\"#A38F79\\\", \\\"PSP\\\": \\\"#3CCCCB\\\", \\\"PSV\\\": \\\"#454E7C\\\", \\\"Platform\\\": \\\"#FDE380\\\", \\\"Puzzle\\\": \\\"#454E7C\\\", \\\"Racing\\\": \\\"#9EE5E5\\\", \\\"Role-Playing\\\": \\\"#EFA1AA\\\", \\\"SAT\\\": \\\"#5AC189\\\", \\\"SCD\\\": \\\"#E04355\\\", \\\"SNES\\\": \\\"#FDE380\\\", \\\"Shooter\\\": \\\"#B2B2B2\\\", \\\"Simulation\\\": \\\"#1FA8C9\\\", \\\"Sports\\\": \\\"#FEC0A1\\\", \\\"Strategy\\\": \\\"#FF7F44\\\", \\\"TG16\\\": \\\"#3CCCCB\\\", \\\"Take-Two Interactive\\\": \\\"#E04355\\\", \\\"WS\\\": \\\"#A868B7\\\", \\\"Wii\\\": \\\"#666666\\\", \\\"WiiU\\\": \\\"#1FA8C9\\\", \\\"X360\\\": \\\"#5AC189\\\", \\\"XB\\\": \\\"#ACE1C4\\\", \\\"XOne\\\": \\\"#9EE5E5\\\"}, \\\"metrics\\\": [\\\"count\\\"], \\\"number_format\\\": \\\"SMART_NUMBER\\\", \\\"queryFields\\\": {\\\"groupby\\\": \\\"groupby\\\", \\\"metrics\\\": \\\"metrics\\\"}, \\\"row_limit\\\": 10, \\\"slice_id\\\": 661, \\\"time_range\\\": \\\"No filter\\\", \\\"time_range_endpoints\\\": [\\\"inclusive\\\", \\\"exclusive\\\"], \\\"treemap_ratio\\\": 1.618033988749895, \\\"url_params\\\": {}, \\\"viz_type\\\": \\\"treemap\\\"}\",\r\n        \"query_context\": null,\r\n        \"slice_name\": \"Test API Altered Created Chart\",\r\n        \"viz_type\": \"treemap\",\r\n        \"datasource_id\": 2,\r\n        \"datasource_type\": \"table\"\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/chart/{{ChartID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"chart",
										"{{ChartID}}"
									]
								},
								"description": "Updates a Chart via the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{ChartID}}` with the chart `id` retrieved from the  \n    **Get all Charts from a Workspace** endpoint.\n    \n\nReplace in the body:\n\n- `cache_timeout` (optional) by the chart timeout in seconds.\n    \n- `certification_details` (optional) by the details of certification.\n    \n- `certified_by` (optional) by the certifier.\n    \n- `dashboards` by a comma separated list (csl) of dashboard ids the chart should be added to (can be empty).\n    \n- `description` (optional) by your description.\n    \n- `is_managed_externally` by true or false.\n    \n- `owners` by a csl of owner ids.\n    \n- `params` by a string of all parameters need to define your chart. You can get an example of this either by checking the network tab by creating a chart in the UI or by calling the **Get a Chart** endpoint.\n    \n- `slice_name` by the name you want to give to your chart.\n    \n- `viz_type` by the visualization type. You can find this with the **Get a Chart** endpoint for a similar chart.\n    \n- `datasource_id` by the id of the dataset powering your chart.\n    \n- `datasource_type` by the type of the underlying dataset."
							},
							"response": []
						},
						{
							"name": "Delete a Chart",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/chart/{{ChartID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"chart",
										"{{ChartID}}"
									]
								},
								"description": "Deletes a Chart.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{ChartID}}` with the chart `id` retrieved from the **Get all Charts from a Workspace** endpoint."
							},
							"response": []
						}
					],
					"description": "APIs to manage Charts on your Workspace."
				},
				{
					"name": "Dashboards",
					"item": [
						{
							"name": "Get all Dashboards From a Workspace",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "(page:0,page_size:100)",
											"description": "*(optional)* Used to control pagination and page size (max page size = 100).",
											"disabled": true
										}
									]
								},
								"description": "Gets all Dashboards from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n ```\n\nReplace:\n\n- `{{PageSize}}` with the desired size (min `1` max `100`).\n    \n- `{{Page}}` with the page number (useful when the total count > `{{PageSize}}` - min `0`)."
							},
							"response": []
						},
						{
							"name": "Get a Dashboard",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}"
									]
								},
								"description": "Get a specific Dashboard from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DashboardID}}` with the `id` of the desired Dashboard. You can get the `id` using the **Get all Dashboards From a Workspace** endpoint. Alternatively, you can get from the Dashboard URL -> `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/dashboard/{{DashboardID}}`."
							},
							"response": []
						},
						{
							"name": "Get Charts from a Dashboard",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}/charts",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}",
										"charts"
									],
									"query": [
										{
											"key": "q",
											"value": "(page:0,page_size:100)",
											"description": "*(optional)* Used to control pagination and page size (max page size = 100).",
											"disabled": true
										}
									]
								},
								"description": "Gets all Charts associated with a Dashboard.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.\n\n- `{{DashboardID}}` with the `id`s of the desired Dashboard. You can get the `id`s using the **Get all Dashboards From a Workspace** endpoint. Alternatively, you can get from the Dashboard URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/dashboard/{{DashboardID}}`.\n    \n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n ```\n\nReplace:\n\n- `{{PageSize}}` with the desired size (min `1` max `100`).\n    \n- `{{Page}}` with the page number (useful when the total count > `{{PageSize}}` - min `0`)."
							},
							"response": []
						},
						{
							"name": "Get Datasets from a Dashboard",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}/datasets",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}",
										"datasets"
									],
									"query": [
										{
											"key": "q",
											"value": "(page:0,page_size:100)",
											"description": "*(optional)* Used to control pagination and page size (max page size = 100).",
											"disabled": true
										}
									]
								},
								"description": "Gets all Datasets associated with a Dashboard.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.\n\n- `{{DashboardID}}` with the `id`s of the desired Dashboard. You can get the `id`s using the **Get all Dashboards From a Workspace** endpoint. Alternatively, you can get from the Dashboard URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/dashboard/{{DashboardID}}`.\n    \n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n ```\n\nReplace:\n\n- `{{PageSize}}` with the desired size (min `1` max `100`).\n    \n- `{{Page}}` with the page number (useful when the total count > `{{PageSize}}` - min `0`)."
							},
							"response": []
						},
						{
							"name": "Get all possible Dashboard Owners",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/related/owners",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"related",
										"owners"
									],
									"query": [
										{
											"key": "q",
											"value": "(page:0,page_size:100)",
											"description": "*(optional)* Used to control pagination and page size (max page size = 100).",
											"disabled": true
										}
									]
								},
								"description": "Gets all possible Dashboard owners on the Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n ```\n\nReplace:\n\n- `{{PageSize}}` with the desired size (min `1` max `100`).\n- `{{Page}}` with the page number (useful when the total count > `{{PageSize}}` - min `0`)."
							},
							"response": []
						},
						{
							"name": "Export Dashboards",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/zip",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/export/?q=!({{DashboardIDs}})",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"export",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "!({{DashboardIDs}})",
											"description": "Comma separated list of Dashboard IDs."
										}
									]
								},
								"description": "Exports a ZIP file from a Dashboard.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DashboardIDs}}` with the `id`s of the Dashboard(s) you want to export (separated by comma). You can get the `id`s using the **Get all Dashboards From a Workspace** endpoint. Alternatively, you can get from the Dashboard URL -> `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/dashboard/{{DashboardID}}`.\n    \n\n_**Tip:**_ If used in Postman, select `Save Response` and `Save to a File` to get the zip export."
							},
							"response": []
						},
						{
							"name": "Get Embedded Configuration for a Dashboard",
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}/embedded",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}",
										"embedded"
									]
								},
								"description": "Retrieves the Embedded configuration for a Dashboard using the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DashboardID}}` with the `id` of the desired Dashboard. You can get the `id` using the **Get all Dashboards From a Workspace** endpoint. Alternatively, you can get it from the Dashboard URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/dashboard/{{DashboardID}}`."
							},
							"response": []
						},
						{
							"name": "Get Dashboard API Metadata Info",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/_info",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"_info"
									]
								},
								"description": "Gets metadata information about the Dashboard API endpoints.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`."
							},
							"response": []
						},
						{
							"name": "Create a Dashboard",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n    \"certification_details\": {{CertfificationDetails}},\n    \"certified_by\": \"{{CertifiedBy}}\",\n \t\"dashboard_title\": \"{{DashboardTitle}}\",\n \t\"json_metadata\": {},\n    \"owners\": [{{OwnerID}}],\n    \"position_json\": \"{{PositionJSON}}\",\n    \"published\": {{Published}},\n    \"slug\": \"{{DashboardSlug}}\"\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										""
									]
								},
								"description": "Creates a Dashboard using the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace in the body:\n\n- `{{CertificationDetails}}` (_optional)_ with the dashboard certification information.\n- `{{CertifiedBy}}` _(optional)_ with the information about the certifier (this is a string, and not a user/account representation).\n- `{{DashboardTitle}}` with the title for the dashboard.\n- You can optionally include a `{{JSONMetadata}}` configuration in the `json_metadata` field, or leave it as an empty JSON.\n- `{{OwnerID}}` with the user `id` retrieved via the **Get all possible Dashboard Owners** API endpoint. This is an array, so multiple IDs can be used.\n- `{{PositionJSON}}` _(optional)_ with the dashboard position configuration. If this is not specified, the default layout would be used.\n- `{{Published}}` with either `true` or `false`.\n- `{{DashboardSlug}}` _(optional)_ with the dashboard slug (friendly URL)."
							},
							"response": []
						},
						{
							"name": "Create a Permalink to a Dashboard",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									},
									{
										"key": "Origin",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"dataMask\":\n    {\n        \"{{FilterID}}\":\n        {\n            \"id\": \"{{FilterID}}\",\n            \"extraFormData\":\n            {\n                \"filters\": [\n                {\n                    \"col\": \"{{Column}}\",\n                    \"op\": \"{{Operator}}\",\n                    \"val\": [\"{{Value}}\"]\n                }]\n            },\n            \"filterState\":\n            {\n                \"validateStatus\": false,\n                \"label\": \"{{Value}}\",\n                \"value\": [\"{{Value}}\"]\n            },\n            \"ownState\":\n            {},\n            \"__cache\":\n            {\n                \"validateStatus\": false,\n                \"label\": \"{{Value}}\",\n                \"value\": [\"{{Value}}\"]\n            }\n        }\n    },\n    \"urlParams\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}/permalink",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}",
										"permalink"
									]
								},
								"description": "Creates a permalink to a Dashboard (with applied filters) using the API.\n\nReplace in the URL and on the `Referer` and `Origin` headers:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace in the body:\n\n- `{{FilterID}}` with the ID of the filter you want to modify. You can retrieve it either via the **Dashboard JSON Metadata**, or via the **Get a Dashboard** endpoint.\n    \n- `{{Column}}` with the column that is used on the filter.\n    \n- `{{Operator}}` with the filtering operation to be applied. Available options:\n    \n    - `IN`\n        \n    - `NOT IN`\n        \n- `{{Value}}` with the value to be applied on the filter."
							},
							"response": []
						},
						{
							"name": "Generate a Dashboard Screenshot",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}/cache_dashboard_screenshot/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}",
										"cache_dashboard_screenshot",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "(force:!t)",
											"description": "*(optional) Refresh the screenshot (Bypass cache)*",
											"disabled": true
										},
										{
											"key": "download_format",
											"value": "pdf",
											"description": "*(optional) Download the image as PDF*",
											"disabled": true
										}
									]
								},
								"description": "Generates a dashboard screenshot.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DashboardID}}` with the `id` of the desired Dashboard. You can get the `id` using the **Get all Dashboards From a Workspace** endpoint. Alternatively, you can get it from the Dashboard URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/dashboard/{{DashboardID}}`.\n    \n\nBy default, an empty array can be used as the request body to get the dashboard screenshot. Alternatively, it's possible to include below fields in the body:\n\n- `dataMask` _(array)_: Specifies the `dataMask` configuration (controls applied filters).\n    \n- `activeTabs` _(list)_: Specify the tab(s) that should be included/selected.\n    \n- `urlParams` _(list)_: List of URL params to be applied to the dashboard.\n    \n\nA `force` query parameter can be used to force refresh the data before taking the screenshot. It's also possible to set the `download_format` to `pdf` (`png` is the default format).\n\nThe screenshot generation is processed in async mode. The API response includes a `task_status` and a `task_updated_at` timestamp that can be used to track progress, along with the `image_url` that can be used to download the file. Possible `task_status` values:\n\n- `Pending`: screenshot is awaiting to be processed.\n    \n- `Computing`: screenshot job has been picked up by the Celery worker and is being processed.\n    \n- `Updated`: screenshot has been processed and is available at the `image_url`.\n    \n- `Error`: an error occurred while processing the task."
							},
							"response": []
						},
						{
							"name": "Import a Dashboard",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data;",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "formData",
											"type": "file",
											"src": []
										},
										{
											"key": "passwords",
											"value": "{\"databases/{{DatabaseYAMLFile}}\": \"{{DatabasePassword}}\"}",
											"type": "text"
										},
										{
											"key": "overwrite",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/import/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"import",
										""
									]
								},
								"description": "Imports a Dashboard via the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nIn the body:\n\n- Select your Dashboard ZIP file as a value for the `formData`.\n    \n- For the `passwords` field:\n    \n    - If the Database used by the Dashboard doesn't exist on the destination Workspace yet:\n        \n        - Replace `{{DatabaseYAMLFile}}` by the Database YAML file name. You can find it in your Dashboard export file, under the `databases` folder.\n            \n        - Replace `{{DatabasePassword}}` by your DB password.\n            \n    - If the Database already exists on the destination Workspace, you can remove this field from the body.\n        \n- For the `overwrite` field:\n    \n    - If the Dashboard already exists on the destination Workspace, set it as `true` to overwrite it.\n        \n    - If the Dashboard doesn't exist in there yet, you can remove this field from the body."
							},
							"response": []
						},
						{
							"name": "Enable Embedded for a Dashboard",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n \t\"allowed_domains\": [\n         \"{{AllowedDomain}}\"\n     ]\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}/embedded",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}",
										"embedded"
									]
								},
								"description": "Enables Embedded mode for a Dashboard using the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DashboardID}}` with the `id` of the desired Dashboard. You can get the `id` using the **Get all Dashboards From a Workspace** endpoint. Alternatively, you can get it from the Dashboard URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/dashboard/{{DashboardID}}`.\n    \n\nReplace in the body:\n\n- `{{AllowedDomain}}` with the domain that should be allowed to embed this dashboard. Make sure to include the protocol( `https://...`). Multiple values can be added and should be separated with a comma. Alternatively, use an empty array to allow embedding on any domain:\n    \n\n``` json\n{\n    \"allowed_domains\": []\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Update a Dashboard",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n    \"certification_details\": {{CertfificationDetails}},\n    \"certified_by\": \"{{CertifiedBy}}\",\n \t\"dashboard_title\": \"{{DashboardTitle}}\",\n \t\"json_metadata\": {},\n    \"owners\": [{{OwnerID}}],\n    \"position_json\": \"{{PositionJSON}}\",\n    \"published\": {{Published}},\n    \"slug\": \"{{DashboardSlug}}\"\n }"
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}"
									]
								},
								"description": "Updates a Dashboard using the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DashboardID}}` with the dashboard `id` retrieved from the **Get all Dashboards from a Workspace** endpoint.\n    \n\nOnly keep in the payload the fields you would like to update and the **owners**. Available fileds:\n\n- `{{CertificationDetails}}` (_optional)_ with the dashboard certification information.\n    \n- `{{CertifiedBy}}` _(optional)_ with the information about the certifier (this is a string, and not a user/account representation).\n    \n- `{{DashboardTitle}}` with the title for the dashboard.\n    \n- You can optionally include a `{{JSONMetadata}}` configuration in the `json_metadata` field, or leave it as an empty JSON.\n    \n- `{{OwnerID}}` with the user `id` retrieved via the **Get all possible Dashboard Owners** API endpoint. This is an array, so multiple IDs can be used.\n    \n- `{{PositionJSON}}` _(optional)_ with the dashboard position configuration. If this is not specified, the default layout would be used.\n    \n- `{{Published}}` with either `true` or `false`.\n    \n- `{{DashboardSlug}}` _(optional)_ with the dashboard slug (friendly URL)."
							},
							"response": []
						},
						{
							"name": "Update Embedded Configuration for a Dashboard",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n \t\"allowed_domains\": [\n         \"{{AllowedDomain}}\"\n     ]\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}/embedded",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}",
										"embedded"
									]
								},
								"description": "Updates the Embedded Configuration for a Dashboard using the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DashboardID}}` with the `id` of the desired Dashboard. You can get the `id` using the **Get all Dashboards From a Workspace** endpoint. Alternatively, you can get it from the Dashboard URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/dashboard/{{DashboardID}}`.\n    \n\nReplace in the body:\n\n- `{{AllowedDomain}}` with the domain that should be allowed to embed this dashboard. Make sure to include the protocol( `https://...`). Multiple values can be added and should be separated with a comma. Alternatively, use an empty array to allow embedding on any domain:\n    \n\n``` json\n{\n    \"allowed_domains\": []\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Disable Embedded for a Dashboard",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}/embedded",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}",
										"embedded"
									]
								},
								"description": "Disables the Embedded configuration for a Dashboard using the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DashboardID}}` with the `id` of the desired Dashboard. You can get the `id` using the **Get all Dashboards From a Workspace** endpoint. Alternatively, you can get it from the Dashboard URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/dashboard/{{DashboardID}}`."
							},
							"response": []
						},
						{
							"name": "Delete Dashboard",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dashboard/{{DashboardID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dashboard",
										"{{DashboardID}}"
									]
								},
								"description": "Deletes a Dashboard.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DashboardID}}` with the `id` of the desired Dashboard. You can get the `id` using the **Get all Dashboards From a Workspace** endpoint. Alternatively, you can get from the Dashboard URL -> `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/dashboard/{{DashboardID}}`."
							},
							"response": []
						}
					],
					"description": "APIs to manage your Dashboards."
				},
				{
					"name": "Databases",
					"item": [
						{
							"name": "Get all Database Connections from a Workspace",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/database",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"database"
									],
									"query": [
										{
											"key": "q",
											"value": "(page:0,page_size:100)",
											"description": "*(optional)* Used to control pagination and page size (max page size = 100).",
											"disabled": true
										}
									]
								},
								"description": "Gets the databases connected to your Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n ```\n\nReplace:\n\n- `{{PageSize}}` with the desired size (min `1` max `100`).\n- `{{Page}}` with the page number (useful when the total count > `{{PageSize}}` - min `0`)."
							},
							"response": []
						},
						{
							"name": "Get a Database Connection",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/database/{{DatabaseID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"database",
										"{{DatabaseID}}"
									]
								},
								"description": "Get a specific Database Connection from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DatabaseID}}` with the Database Connection `id` retrieved from the **Get All Database Connections from a Workspace** endpoint."
							},
							"response": []
						},
						{
							"name": "Get a Database Connection Parameters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/database/{{DatabaseID}}/connection",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"database",
										"{{DatabaseID}}",
										"connection"
									]
								},
								"description": "###### _Requires admin permission._\n\nGet connection parameters from a specific Database Connection from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DatabaseID}}` with the Database Connection `id` retrieved from the **Get All Database Connections from a Workspace** endpoint."
							},
							"response": []
						},
						{
							"name": "Export Database Connections",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/zip",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/database/export?q=!({{DatabaseIDs}})",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"database",
										"export"
									],
									"query": [
										{
											"key": "q",
											"value": "!({{DatabaseIDs}})",
											"description": "Comma separated list of database connection IDs."
										}
									]
								},
								"description": "Exports Database Connections from the Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DatabaseIDs}` with comma separated DB `ids` retrieved from the **Get all Database Connections from a Workspace** endpoint.\n    \n\n_**Tip:**_ If used in Postman, select `Save Response` and `Save to a File` to get the zip export."
							},
							"response": []
						},
						{
							"name": "Create a Database Connection",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"allow_ctas\": {{DBConnectionAllowCTAS}},\r\n    \"allow_cvas\": {{DBConnectionAllowCVAS}},\r\n    \"allow_dml\": {{DBConnectionAllowDML}},\r\n    \"allow_run_async\": {{DBConnectionEnableAsyncQueries}},\r\n    \"cache_timeout\": {{DBConnectionCacheTimeOut}},\r\n    \"database_name\": \"{{DBConnectionName}}\",\r\n    \"expose_in_sqllab\": {{DBConnectionExposeInSQLLab}},\r\n    \"extra\": \"{{DBConnectionExtraConfiguration}}\",\r\n    \"sqlalchemy_uri\": \"{{DBConnectionSQLAlchemyURI}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/database",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"database"
									]
								},
								"description": "Creates a new database connection in the Workspace.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace on the body:\n\n**Required fileds:**\n\n- `{{DBConnectionName}}` with the desired DB connection display name.\n- `{{DBConnectionSQLAlchemyURI}}` with the [connection string](https://docs.preset.io/docs/uri-connection-strings) to the database.\n    \n\n**Optional fields:**\n\n- Boolean fields (use either `true` or `false`):\n    \n    - `{{DBConnectionAllowCTAS}}` to control if `CREATE TABLE AS` statements should be supported in SQL Lab.\n    - `{{DBConnectionAllowCVAS}}` to control if `CREATE VIEW AS` statements should be supported in SQL Lab.\n    - `{{DBConnectionAllowDML}}` to control if DML statements should be supported in SQL Lab (this is required to allow the previous options).\n    - `{{DBConnectionEnableAsyncQueries}}` to control if asynchronous query execution should be enabled for SQL Lab.\n    - `{{DBConnectionExposeInSQLLab}}` to control if the connection should be exposed in SQL Lab.\n- `{{DBConnectionCacheTimeOut}}` with the duration (in seconds) cached results should be valid for charts powered by this connection.\n- `{{DBConnectionExtraConfiguration}}` with any addifional configuration (like **Engine Parameters**). For example:\n    \n\n```\n{\\\"engine_params\\\": {\\\"connect_args\\\": {\\\"http_path\\\": \\\"/sql/1.0/warehouses/********\\\"}}}\n\n ```\n\n**Note:** You need to escape quotes (`\"`) and other special characters using `\\` on all body fields."
							},
							"response": []
						},
						{
							"name": "Create a Database Connection using SSH",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app-dev.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"database_name\": \"{{DBConnectionName}}\",\n    \"configuration_method\": \"sqlalchemy_form\",\n    \"sqlalchemy_uri\": \"{{SQLAlchemyURI}}\",\n    \"ssh_tunnel\": {\n        \"username\": \"{{SSHUsername}}\",\n        \"password\": \"{{SSHServerPassword}}\",\n        \"private_key\": \"{{PrivateKey}}\",\n        \"private_key_password\": \"{{PrivateKeyPassword}}\",\n        \"server_port\": 22,\n        \"server_address\": \"{{SSHServerAddress}}\"\n    },\n    \"allow_csv_upload\": \"boolean\",\n    \"allow_ctas\": \"boolean\",\n    \"allow_cvas\": \"boolean\",\n    \"allow_dml\": \"boolean\",\n    \"allow_multi_schema_metadata_fetch\": \"boolean\",\n    \"allow_run_async\": \"boolean\",\n    \"cache_timeout\": 0,\n    \"expose_in_sqllab\": \"boolean\",\n    \"impersonate_user\": \"boolean\",\n    \"extra\": \"{{ExtraConfiguration}}\"\n}"
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/database/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"database",
										""
									]
								},
								"description": "Creates a new database connection on the Workspace using SSH.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace on the body:\n\n- `{{DBConnectionName}}` with the desired DB connection display name.\n    \n- `{{SQLAlchemyURI}}` with the [connection string](https://docs.preset.io/docs/uri-connection-strings) to the database.\n    \n- For the SSH configuration:\n    \n    - Use either a `username` and `password`, or `username`, `private_key` and `private_key_password` combination to authenticate to the SSH server, removing the un-used fields.\n        \n    - Replace `{{SSHServerAddress}}` with the SSH server host address.\n        \n- `boolean` with either `true` or `false` to enable/disable the connection settings.\n    \n- `{{ExtraConfiguration}}` _(optional)_ with any addifional configuration (like **Engine Parameters**). For example:\n    \n\n```\n{\\\"engine_params\\\": {\\\"connect_args\\\": {\\\"http_path\\\": \\\"/sql/1.0/warehouses/********\\\"}}}\n\n ```\n\n**Note:** You need to escape quotes (`\"`) and other special characters using `\\` on all body fields."
							},
							"response": []
						},
						{
							"name": "Import a Database Connection",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data;",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "formData",
											"type": "file",
											"src": []
										},
										{
											"key": "passwords",
											"value": "{\"databases/{{DatabaseYAMLFile}}\": \"{{DatabasePassword}}\"}",
											"type": "text"
										},
										{
											"key": "overwrite",
											"value": "true",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/database/import/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"database",
										"import",
										""
									]
								},
								"description": "Imports a Database Connection.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nIn the body:\n\n- Select your Chart ZIP file as a value for the `formData`.\n    \n- For the `passwords` field:\n    \n    - Replace `{{DatabaseYAMLFile}}` by the database YAML file name. You can find it in your export file, under the `databases` folder.\n        \n    - Replace `{{DatabasePassword}}` by the DB password.\n        \n- For the `overwrite` field:\n    \n    - If the DB Connection already exists on the destination Workspace, set it as `true` to overwrite it."
							},
							"response": []
						},
						{
							"name": "Update a Database Connection",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    //include the keys you would like to modify\n    \"database_name\": \"{{DBConnectionName}}\"\n}"
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/database/{{DatabaseID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"database",
										"{{DatabaseID}}"
									]
								},
								"description": "Updates an existing Database Connection.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DatabaseID}}` with the Database Connection `id` retrieved from the **Get All Database Connections from a Workspace** endpoint.\n    \n\nIn the body:\n\nInclude the keys you would like to update. Refer to the **Create a Database Connection** payload to check supported values."
							},
							"response": []
						}
					],
					"description": "APIs to manage your database connections."
				},
				{
					"name": "Datasets",
					"item": [
						{
							"name": "Get all Datasets from a Workspace",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dataset/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dataset",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "(page:0,page_size:100)",
											"description": "*(optional)* Used to control pagination and page size (max page size = 100).",
											"disabled": true
										}
									]
								},
								"description": "Gets all Datasets available on the Worpkspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n ```\n\nReplace:\n\n- `{{PageSize}}` with the desired size (min `1` max `100`).\n    \n- `{{Page}}` with the page number (useful when the total count > `{{PageSize}}` - min `0`)."
							},
							"response": []
						},
						{
							"name": "Get a Dataset",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dataset/{{DatasetID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dataset",
										"{{DatasetID}}"
									],
									"query": [
										{
											"key": "include_rendered_sql",
											"value": "true",
											"description": "*(optional)* Controls if Jinja syntax should be rendered and included in the response",
											"disabled": true
										}
									]
								},
								"description": "Get a specific Dataset from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DatasetID}}` with the Dataset `id` retrieved from the **Get All Datasets from a Workspace** endpoint.\n    \n\nThe `include_rendered_sql` query parameter is optional, and can be set to `true` to include Jinja syntax rendered in the response:\n\n- For virtual datasets, `rendered_sql` is added to the reponse to include the rendered SQL query.\n    \n- `rendered_expression` is added to every metric and calculated column to include the rendered SQL syntax."
							},
							"response": []
						},
						{
							"name": "Get all possible Dataset Owners",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dataset/related/owners",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dataset",
										"related",
										"owners"
									],
									"query": [
										{
											"key": "q",
											"value": "(page:0,page_size:100)",
											"description": "*(optional)* Used to control pagination and page size (max page size = 100).",
											"disabled": true
										}
									]
								},
								"description": "Gets all possible Dataset owners on the Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n ```\n\nReplace:\n\n- `{{PageSize}}` with the desired size (min `1` max `100`).\n    \n- `{{Page}}` with the page number (useful when the total count > `{{PageSize}}` - min `0`)."
							},
							"response": []
						},
						{
							"name": "Export Datasets",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/zip",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dataset/export?q=!({{DatasetIDs}})",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dataset",
										"export"
									],
									"query": [
										{
											"key": "q",
											"value": "!({{DatasetIDs}})",
											"description": "Comma separated list of Dataset IDs."
										}
									]
								},
								"description": "Exports Datasets from the Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DatasetIDs}}` with comma separated `ids` retrieved from the **Get all Datasets from a Workspace** endpoint.\n    \n\n_**Tip:**_ If used in Postman, select `Save Response` and `Save to a File` to get the zip export."
							},
							"response": []
						},
						{
							"name": "Create a Physical Dataset",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"database\": {{DBID}},\r\n    \"schema\": \"{{SchemaName}}\",\r\n    \"table_name\": \"{{TableName}}\",\r\n    \"owners\": [\r\n        {{OwnerID}}\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dataset",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dataset"
									]
								},
								"description": "Creates a new Physical Dataset.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace in the body:\n\n- `{{DBID}}` with the database `id` retrieved using the **Get Databases** endoint.\n    \n- `{{SchemaName}}` with the desired schema.\n    \n- `{{TableName}}` with the desired table.\n    \n- `{{OwnerID}}` with the `id` for the desired owner account(s) retrieved from the **Get all possible Dataset Owners** endpoint. Use a comma to separate multiple IDs (for example, `[2,5]`)."
							},
							"response": []
						},
						{
							"name": "Create a Virtual Dataset",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"database\": {{DBID}},\r\n    \"schema\": \"{{SchemaName}}\",\r\n    \"table_name\": \"{{TableName}}\",\r\n    \"sql\": \"{{DatasetSQL}}\",\r\n    \"owners\": [\r\n        {{OwnerID}}\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dataset",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dataset"
									]
								},
								"description": "Creates a new Virtual Dataset.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace in the body:\n\n- `{{DBID}}` with the database `id` retrieved using the **Get Databases** endoint.\n    \n- `{{SchemaName}}` with the desired schema.\n    \n- `{{TableName}}` with the desired table.\n    \n- `{{DatasetSQL}}` with the SQL query to power your dataset.\n    \n- `{{OwnerID}}` with the `id` for the desired owner account(s) retrieved from the **Get all possible Dataset Owners** endpoint. Use a comma to separate multiple IDs (for example, `[2,5]`)."
							},
							"response": []
						},
						{
							"name": "Import a Dataset",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "multipart/form-data;",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "formData",
											"type": "file",
											"src": []
										},
										{
											"key": "passwords",
											"value": "{\"databases/{{DatabaseYAMLFile}}\": \"{{DatabasePassword}}\"}",
											"type": "text"
										},
										{
											"key": "overwrite",
											"value": "true",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dataset/import/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dataset",
										"import",
										""
									]
								},
								"description": "Imports a Dataset.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nIn the body:\n\n- Select your Dataset ZIP file as a value for the `formData`.\n    \n- For the `passwords` field:\n    \n    - Replace `{{DatabaseYAMLFile}}` by the database YAML file name. You can find it in your export file, under the `databases` folder.\n        \n    - Replace `{{DatabasePassword}}` by the DB password.\n        \n- For the `overwrite` field:\n    \n    - If the DB Connection already exists on the destination Workspace, set it as `true` to overwrite it."
							},
							"response": []
						},
						{
							"name": "Update a Physical Dataset",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"database_id\": {{DBID}},\n    \"schema\": \"{{SchemaName}}\",\n    \"table_name\": \"{{TableName}}\",\n    \"owners\": [\n        {{OwnerID}}\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dataset/{{DatasetID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dataset",
										"{{DatasetID}}"
									]
								},
								"description": "Updates a Physical Dataset.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DatasetID}}` with the Dataset `id` retrieved from the **Get All Datasets from a Workspace** endpoint.\n    \n\nReplace in the body:\n\n- `{{DBID}}` with the database `id` retrieved using the **Get Databases** endoint.\n    \n- `{{SchemaName}}` with the desired schema.\n    \n- `{{TableName}}` with the desired table.\n    \n- `{{OwnerID}}` with the `id` for the desired owner account(s) retrieved from the **Get all possible Dataset Owners** endpoint. Use a comma to separate multiple IDs (for example, `[2,5]`)."
							},
							"response": []
						},
						{
							"name": "Update a Virtual Dataset",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"database_id\": {{DBID}},\n    \"schema\": \"{{SchemaName}}\",\n    \"table_name\": \"{{TableName}}\",\n    \"sql\": \"{{DatasetSQL}}\",\n    \"owners\": [\n        {{OwnerID}}\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dataset/{{DatasetID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dataset",
										"{{DatasetID}}"
									]
								},
								"description": "Updates a Virtual Dataset.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DatasetID}}` with the Dataset `id` retrieved from the **Get All Datasets from a Workspace** endpoint.\n    \n\nReplace in the body:\n\n- `{{DBID}}` with the database `id` retrieved using the **Get Databases** endoint.\n    \n- `{{SchemaName}}` with the desired schema.\n    \n- `{{TableName}}` with the desired table.\n    \n- `{{DatasetSQL}}` with the SQL query to power your dataset.\n    \n- `{{OwnerID}}` with the `id` for the desired owner account(s) retrieved from the **Get all possible Dataset Owners** endpoint. Use a comma to separate multiple IDs (for example, `[2,5]`)."
							},
							"response": []
						},
						{
							"name": "Refresh a Dataset",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dataset/{{DatasetID}}/refresh",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dataset",
										"{{DatasetID}}",
										"refresh"
									]
								},
								"description": "Refreshes and updates columns of a Dataset.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DatasetID}}` with the Dataset `id` retrieved from the **Get All Datasets from a Workspace** endpoint."
							},
							"response": []
						},
						{
							"name": "Delete a Dataset",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/dataset/{{DatasetID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"dataset",
										"{{DatasetID}}"
									]
								},
								"description": "Deletes a Dataset.\n\nReplace in the URL and in the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{DatasetID}}` with the Dataset `id` retrieved from the **Get All Datasets from a Workspace** endpoint."
							},
							"response": []
						}
					],
					"description": "APIs to manage your datasets."
				},
				{
					"name": "Queries",
					"item": [
						{
							"name": "Get All Workspace Queries",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/query/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"query",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SQL Lab",
					"item": [
						{
							"name": "Execute a SQL Query",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"database_id\": {{DatabaseID}},\n    \"sql\": \"{{SQLQuery}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/sqllab/execute/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"sqllab",
										"execute",
										""
									]
								},
								"description": "Executes a SQL query through the API.\n\nReplace in the URL and in the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n    \n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace in the body:\n\n- `{{DBID}}` with the `id` retrieved from the **Get all Database Connections from a Workspace** endpoint.\n    \n- `{{SQLQuery}}` with the desired SQL query to be executed. Don't forget to escape quotes with `\\`. For example:\n    \n\n``` json\n{\n    \"database_id\": 1,\n    \"sql\": \"SELECT * FROM \\\"Vehicle Sales\\\" limit 7\" \n  }\n\n ```"
							},
							"response": []
						}
					]
				},
				{
					"name": "Tags",
					"item": [
						{
							"name": "Get all Tags from a Workspace",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/tag/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"tag",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "(page:0,page_size:100)",
											"description": "*(optional)* Used to control pagination and page size (max page size = 100).",
											"disabled": true
										}
									]
								},
								"description": "Gets all Tags from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n ```\n\nReplace:\n\n- `{{PageSize}}` with the desired size (min `1` max `100`).\n- `{{Page}}` with the page number (useful when the total count > `{{PageSize}}` - min `0`)."
							},
							"response": []
						},
						{
							"name": "Get a Tag",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/tag/{{TagID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"tag",
										"{{TagID}}"
									]
								},
								"description": "Gets a specific Tag from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{TagID}}` with the tag `id` retrieved from the **Get all Tags from a Workspace** endpoint."
							},
							"response": []
						},
						{
							"name": "Get all Assets associated with a Tag",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/tag/get_objects/?tags={{TagName}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"tag",
										"get_objects",
										""
									],
									"query": [
										{
											"key": "tags",
											"value": "{{TagName}}"
										}
									]
								},
								"description": "Gets al Assets associated with a specific Tag from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{TagName}}` with the tag title."
							},
							"response": []
						},
						{
							"name": "Create a Tag",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{TagDescription}}\",\n    \"name\": \"{{TagName}}\",\n    \"objects_to_tag\": [\n        [\n            \"{{AssetType}}\",\n            {{AssetID}}\n        ]\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/tag/",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"tag",
										""
									]
								},
								"description": "Creates a Tag through the API.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nReplace in the body:\n\n- `{{TagDescription}}` _(optional)_ with the tag description.\n    \n- `{{TagName}}` with the tag name.\n    \n- `objects_to_tag` _(optional)_ is an array that can be used to associate this tag with assets during creation. For each asset that should be associated with the tag, include an array of `[\"{{AssetType}}\", {{AssetID}}]` replacing:\n    \n    - `{{AssetType}}` with `chart`, `dashboard` or `query`.\n        \n    - `{{AssetID}}` with the actual asset ID."
							},
							"response": []
						},
						{
							"name": "Add Tags in Bulk to Assets",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tags\": [\n        {\n            \"name\": \"{{TagName}}\",\n            \"objects_to_tag\": [\n                [\n                    \"{{AssetType}}\",\n                    {{AssetID}}\n                ]\n            ]\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/tag/bulk_create",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"tag",
										"bulk_create"
									]
								},
								"description": "Adds Tags in bulk to Assets through the API.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\nFor each tag that should be associated with an asset, add a new dictionary to the `tags` array with the following information:\n\n- `{{TagName}}` with the name of the tag that should be used.\n- `objects_to_tag` with an array of arrays containing the assets' information. For each asset that should be associated with the tag, include an array of `[\"{{AssetType}}\", {{AssetID}}]` replacing:\n    - `{{AssetType}}` with `chart`, `dashboard` or `query`.\n    - `{{AssetID}}` with the actual asset ID.\n\n**Note that this endpoint can't be used to create tags. Use it to associate existing tags to existing assets.**"
							},
							"response": []
						},
						{
							"name": "Update a Tag",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"{{TagDescription}}\",\n    \"name\": \"{{TagName}}\",\n    \"objects_to_tag\": [\n        [\n            \"{{AssetType}}\",\n            {{AssetID}}\n        ]\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/tag/{{TagID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"tag",
										"{{TagID}}"
									]
								},
								"description": "Updates an existing Tag through the API.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{TagID}}` with the `id` of the tag retrieved with the **Get all Tags from the Workspace** API endoint.\n    \n\nReplace in the body:\n\n- `{{TagDescription}}` with the tag description.\n    \n- `{{TagName}}` with the tag name.\n    \n- `objects_to_tag` is an array that can be used to associate this tag with assets. For each asset that should be associated with the tag, include an array of `[\"{{AssetType}}\", {{AssetID}}]` replacing:\n    \n    - `{{AssetType}}` with `chart`, `dashboard` or `query`.\n        \n    - `{{AssetID}}` with the actual asset ID."
							},
							"response": []
						},
						{
							"name": "Delete a Tag",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{JWTToken}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Referer",
										"value": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/api/v1/tag/{{TagID}}",
									"protocol": "https",
									"host": [
										"{{WorkspaceSlug}}",
										"{{WorkspaceRegion}}",
										"app",
										"preset",
										"io"
									],
									"path": [
										"api",
										"v1",
										"tag",
										"{{TagID}}"
									]
								},
								"description": "Deletes a Tag through the API.\n\nReplace in the URL and on the `Referer` header:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.app.preset.io/superset/welcome/`.\n\n- `{{TagID}}` with the `id` of the tag retrieved from the **Get all Tags from a Workspace** API endpoint."
							},
							"response": []
						}
					]
				}
			],
			"description": "Superset APIs can be used to interact with assets in your Workspaces. Note that Superset APIs are contributed from the Open Source Community, so they are subject to change without previous notification. Please keep this in mind when working with them."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{JWTToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"//AUTHENTICATION HANDLER",
					"",
					"//Function to get a new JWT Token",
					"function generateNewJWT() {",
					"    const postRequest = {",
					"        url: 'https://manage.app.preset.io/api/v1/auth/',",
					"        method: 'POST',",
					"        header: {",
					"            'Content-Type': 'application/json',",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ name: APIName, secret: APISecret })",
					"        }",
					"    };",
					"    pm.sendRequest(postRequest, (error, response) => {",
					"        if (error) {",
					"            console.error(\"We couldn't get a new JWT Token\");",
					"            console.error(error);",
					"        } else {",
					"            if (response.code == 200) {",
					"                var temp = response.json();",
					"                pm.globals.set(\"JWTToken\", temp[\"payload\"][\"access_token\"]);",
					"            } else {",
					"                console.error(\"We couldn't get a new JWT Token\");",
					"                console.error(response);",
					"            }",
					"        }",
					"    });",
					"};",
					"",
					"//Check if the JWTToken Global Variable is currently set",
					"var currentToken = pm.globals.get(\"JWTToken\");",
					"//Check if API Token & Secret are defined",
					"var APIName = pm.collectionVariables.get(\"APIToken\");",
					"var APISecret = pm.collectionVariables.get(\"APISecret\");",
					"if (!currentToken) {",
					"    console.log(\"JWT Token not defined.\");",
					"    if (!APIName || !APISecret) {",
					"        console.error(\"Unable to generate a new JWT token - Missing authentication information.\");",
					"    } else {",
					"        console.log(\"Let's get a JWT Token\");",
					"        generateNewJWT();",
					"    }",
					"} else {",
					"    console.log(\"Let's check if the JWT is still valid\");",
					"",
					"    //Uses the /api/v1/users/me/ endpoint to check if authentication succeeds",
					"    const getRequest = {",
					"        url: 'https://manage.app.preset.io/api/v1/users/me/',",
					"        method: 'GET',",
					"        header: {",
					"            'Accept': 'application/json',",
					"            'Authorization': 'Bearer ' + currentToken",
					"        }",
					"    };",
					"    pm.sendRequest(getRequest, (error, response) => {",
					"        if (error) {",
					"            console.error(\"Something went wrong\");",
					"            console.error(error);",
					"        } else {",
					"            if (response.code == 200) {",
					"                console.log(\"Authentication succeeded - let's proceed.\");",
					"            } else {",
					"                console.warn(\"Authentication failed - let's get a new JWT Token\");",
					"                if (!APIName || !APISecret) {",
					"                    console.error(\"Unable to generate a new JWT token - Missing authentication information.\");",
					"                } else {",
					"                    generateNewJWT();",
					"                }",
					"            }",
					"        }",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "APIToken",
			"value": "{{APIToken}}",
			"type": "string"
		},
		{
			"key": "APISecret",
			"value": "{{APISecret}}",
			"type": "string"
		},
		{
			"key": "TeamSlug",
			"value": "{{TeamSlug}}",
			"type": "string"
		},
		{
			"key": "NewTeamTitle",
			"value": "{{NewTeamTitle}}",
			"type": "string"
		},
		{
			"key": "UserID",
			"value": "{{UserID}}",
			"type": "string"
		},
		{
			"key": "RoleID",
			"value": "{{RoleID}}",
			"type": "string"
		},
		{
			"key": "InviteID",
			"value": "{{InviteID}}",
			"type": "string"
		},
		{
			"key": "Email",
			"value": "{{Email}}",
			"type": "string"
		},
		{
			"key": "Email2",
			"value": "{{Email2}}",
			"type": "string"
		},
		{
			"key": "NewWorkspaceTitle",
			"value": "{{NewWorkspaceTitle}}",
			"type": "string"
		},
		{
			"key": "NewWorkspaceRegion",
			"value": "{{NewWorkspaceRegion}}",
			"type": "string"
		},
		{
			"key": "WorkspaceID",
			"value": "{{WorkspaceID}}",
			"type": "string"
		},
		{
			"key": "RoleIdentifier",
			"value": "{{RoleIdentifier}}",
			"type": "string"
		},
		{
			"key": "WorkspaceSlug",
			"value": "{{WorkspaceSlug}}",
			"type": "string"
		},
		{
			"key": "WorkspaceRegion",
			"value": "{{WorkspaceRegion}}",
			"type": "string"
		},
		{
			"key": "Username",
			"value": "{{Username}}",
			"type": "string"
		},
		{
			"key": "PermissionName",
			"value": "{{PermissionName}}",
			"type": "string"
		},
		{
			"key": "Resource",
			"value": "{{Resource}}",
			"type": "string"
		},
		{
			"key": "WorkspaceRole",
			"value": "{{WorkspaceRole}}",
			"type": "string"
		},
		{
			"key": "ChartID",
			"value": "{{ChartID}}",
			"type": "string"
		},
		{
			"key": "ChartIDs",
			"value": "{{ChartIDs}}",
			"type": "string"
		},
		{
			"key": "DashboardID",
			"value": "{{DashboardID}}",
			"type": "string"
		},
		{
			"key": "DashboardIDs",
			"value": "{{DashboardIDs}}",
			"type": "string"
		},
		{
			"key": "NewDashboardName",
			"value": "{{NewDashboardName}}",
			"type": "string"
		},
		{
			"key": "CertificationDetails",
			"value": "{{CertificationDetails}}",
			"type": "string"
		},
		{
			"key": "CertifiedBy",
			"value": "{{CertifiedBy}}",
			"type": "string"
		},
		{
			"key": "EmbeddedDashboardID",
			"value": "{{EmbeddedDashboardID}}",
			"type": "string"
		},
		{
			"key": "firstName",
			"value": "{{firstName}}",
			"type": "string"
		},
		{
			"key": "lastName",
			"value": "{{lastName}}",
			"type": "string"
		},
		{
			"key": "PermissionType",
			"value": "{{PermissionType}}",
			"type": "string"
		},
		{
			"key": "DatabaseYAMLFile",
			"value": "{{DatabaseYAMLFile}}",
			"type": "string"
		},
		{
			"key": "DatabasePassword",
			"value": "{{DatabasePassword}}",
			"type": "string"
		},
		{
			"key": "ResourceType",
			"value": "{{ResourceType}}",
			"type": "string"
		},
		{
			"key": "GranteeIdentifier",
			"value": "{{GranteeIdentifier}}",
			"type": "string"
		},
		{
			"key": "ResourceName",
			"value": "{{ResourceName}}",
			"type": "string"
		},
		{
			"key": "GranteeType",
			"value": "{{GranteeType}}",
			"type": "string"
		},
		{
			"key": "DARName",
			"value": "{{DARName}}",
			"type": "string"
		},
		{
			"key": "GrantAction",
			"value": "{{GrantAction}}",
			"type": "string"
		},
		{
			"key": "RLSName",
			"value": "{{RLSName}}",
			"type": "string"
		},
		{
			"key": "RLSClause",
			"value": "{{RLSClause}}",
			"type": "string"
		},
		{
			"key": "RLSFilterType",
			"value": "{{RLSFilterType}}",
			"type": "string"
		},
		{
			"key": "RLSGroupKey",
			"value": "{{RLSGroupKey}}",
			"type": "string"
		},
		{
			"key": "DARName1",
			"value": "{{DARName1}}",
			"type": "string"
		},
		{
			"key": "DARName2",
			"value": "{{DARName2}}",
			"type": "string"
		},
		{
			"key": "DatabaseIDs",
			"value": "{{DatabaseIDs}}",
			"type": "string"
		},
		{
			"key": "DatasetIDs",
			"value": "{{DatasetIDs}}",
			"type": "string"
		},
		{
			"key": "AnnotationLayerID",
			"value": "{{AnnotationLayerID}}",
			"type": "string"
		},
		{
			"key": "AnnotationLayerDescription",
			"value": "{{AnnotationLayerDescription}}",
			"type": "string"
		},
		{
			"key": "AnnotationLayerName",
			"value": "{{AnnotationLayerName}}",
			"type": "string"
		},
		{
			"key": "AnnotationID",
			"value": "{{AnnotationID}}",
			"type": "string"
		},
		{
			"key": "AnnotationEndDTTM",
			"value": "{{AnnotationEndDTTM}}",
			"type": "string"
		},
		{
			"key": "AnnotationLongDescription",
			"value": "{{AnnotationLongDescription}}",
			"type": "string"
		},
		{
			"key": "AnnotationTitle",
			"value": "{{AnnotationShortDescription}}",
			"type": "string"
		},
		{
			"key": "AnnotationStartDTTM",
			"value": "{{AnnotationStartDTTM}}",
			"type": "string"
		},
		{
			"key": "AnnotationIDs",
			"value": "{{AnnotationIDs}}",
			"type": "string"
		},
		{
			"key": "AnnotationLayerIDs",
			"value": "{{AnnotationLayerIDs}}",
			"type": "string"
		},
		{
			"key": "AlertID OR ReportID",
			"value": "{{AlertID OR ReportID}}",
			"type": "string"
		},
		{
			"key": "DatasetID",
			"value": "{{DatasetID}}",
			"type": "string"
		},
		{
			"key": "DBConnectionExtraConfiguration",
			"value": "{{DBConnectionExtraConfiguration}}",
			"type": "string"
		},
		{
			"key": "ReportName",
			"value": "{{ReportName}}",
			"type": "string"
		},
		{
			"key": "ReportDescription",
			"value": "{{ReportDescription}}",
			"type": "string"
		},
		{
			"key": "CRONSchedule",
			"value": "{{CRONSchedule}}",
			"type": "string"
		},
		{
			"key": "Timezone",
			"value": "{{Timezone}}",
			"type": "string"
		},
		{
			"key": "ForceBooleanFlag",
			"value": "{{ForceBooleanFlag}}",
			"type": "string"
		},
		{
			"key": "ReportFormat",
			"value": "{{ReportFormat}}",
			"type": "string"
		},
		{
			"key": "OwnerID",
			"value": "{{OwnerID}}",
			"type": "string"
		},
		{
			"key": "ReportType",
			"value": "{{ReportType}}",
			"type": "string"
		},
		{
			"key": "TargetInfo",
			"value": "{{TargetInfo}}",
			"type": "string"
		},
		{
			"key": "LogRetention",
			"value": "{{LogRetention}}",
			"type": "string"
		},
		{
			"key": "WorkingTimeout",
			"value": "{{WorkingTimeout}}",
			"type": "string"
		},
		{
			"key": "GracePeriod",
			"value": "{{GracePeriod}}",
			"type": "string"
		},
		{
			"key": "AlertName",
			"value": "{{AlertName}}",
			"type": "string"
		},
		{
			"key": "AlertDescription",
			"value": "{{AlertDescription}}",
			"type": "string"
		},
		{
			"key": "AlertFormat",
			"value": "{{AlertFormat}}",
			"type": "string"
		},
		{
			"key": "DatabaseID",
			"value": "{{DatabaseID}}",
			"type": "string"
		},
		{
			"key": "SQLCondition",
			"value": "{{SQLCondition}}",
			"type": "string"
		},
		{
			"key": "ValidatorType",
			"value": "{{ValidatorType}}",
			"type": "string"
		},
		{
			"key": "Operator",
			"value": "{{Operator}}",
			"type": "string"
		},
		{
			"key": "Threshold",
			"value": "{{Threshold}}",
			"type": "string"
		},
		{
			"key": "DatasetSQL",
			"value": "{{DatasetSQL}}",
			"type": "string"
		},
		{
			"key": "ActiveBooleanFlag",
			"value": "{{ActiveBooleanFlag}}",
			"type": "string"
		},
		{
			"key": "SQLQuery",
			"value": "{{SQLQuery}}",
			"type": "string"
		},
		{
			"key": "SSHServerPassword",
			"value": "{{SSHServerPassword}}",
			"type": "string"
		},
		{
			"key": "SSHServerAddress",
			"value": "{{SSHServerAddress}}",
			"type": "string"
		},
		{
			"key": "PrivateKey",
			"value": "{{PrivateKey}}",
			"type": "string"
		},
		{
			"key": "PrivateKeyPassword",
			"value": "{{PrivateKeyPassword}}",
			"type": "string"
		},
		{
			"key": "SSHUsername",
			"value": "{{SSHUsername}}",
			"type": "string"
		},
		{
			"key": "DBConnectionName",
			"value": "{{DBConnectionName}}",
			"type": "string"
		},
		{
			"key": "DatasetType",
			"value": "{{DatasetType}}",
			"type": "string"
		},
		{
			"key": "VisualizationType",
			"value": "{{VisualizationType}}",
			"type": "string"
		},
		{
			"key": "RowLimit",
			"value": "{{RowLimit}}",
			"type": "string"
		},
		{
			"key": "EntityType",
			"value": "{{EntityType}}",
			"type": "string"
		},
		{
			"key": "EntityID",
			"value": "{{EntityID}}",
			"type": "string"
		},
		{
			"key": "EntityName",
			"value": "{{EntityName}}",
			"type": "string"
		},
		{
			"key": "ActionURN",
			"value": "{{ActionURN}}",
			"type": "string"
		},
		{
			"key": "UsernameOREmail",
			"value": "{{UsernameOREmail}}",
			"type": "string"
		},
		{
			"key": "StartTime",
			"value": "{{StartTime}}",
			"type": "string"
		},
		{
			"key": "EndTime",
			"value": "{{EndTime}}",
			"type": "string"
		},
		{
			"key": "PageNumber",
			"value": "{{PageNumber}}",
			"type": "string"
		},
		{
			"key": "PageSize",
			"value": "{{PageSize}}",
			"type": "string"
		},
		{
			"key": "OrderColumn",
			"value": "{{OrderColumn}}",
			"type": "string"
		},
		{
			"key": "SortOption",
			"value": "{{SortOption}}",
			"type": "string"
		},
		{
			"key": "AllowedDomain",
			"value": "{{AllowedDomain}}",
			"type": "string"
		},
		{
			"key": "TagID",
			"value": "{{TagID}}",
			"type": "string"
		},
		{
			"key": "TagDescription",
			"value": "{{TagDescription}}",
			"type": "string"
		},
		{
			"key": "TagName",
			"value": "{{TagName}}",
			"type": "string"
		},
		{
			"key": "AssetType",
			"value": "{{AssetType}}",
			"type": "string"
		},
		{
			"key": "AssetID",
			"value": "{{AssetID}}",
			"type": "string"
		},
		{
			"key": "Published",
			"value": "{{Published}}",
			"type": "string"
		},
		{
			"key": "DashboardSlug",
			"value": "{{DashboardSlug}}",
			"type": "string"
		},
		{
			"key": "JSONMetadata",
			"value": "{{JSONMetadata}}",
			"type": "string"
		},
		{
			"key": "PositionJSON",
			"value": "{{PositionJSON}}",
			"type": "string"
		},
		{
			"key": "DBConnectionAllowCTAS",
			"value": "{{DBConnectionAllowCTAS}}",
			"type": "string"
		},
		{
			"key": "DBConnectionAllowCVAS",
			"value": "{{DBConnectionAllowCVAS}}",
			"type": "string"
		},
		{
			"key": "DBConnectionAllowDML",
			"value": "{{DBConnectionAllowDML}}",
			"type": "string"
		},
		{
			"key": "DBConnectionEnableAsyncQueries",
			"value": "{{DBConnectionEnableAsyncQueries}}",
			"type": "string"
		},
		{
			"key": "DBConnectionCacheTimeOut",
			"value": "{{DBConnectionCacheTimeOut}}",
			"type": "string"
		},
		{
			"key": "DBConnectionExposeInSQLLab",
			"value": "{{DBConnectionExposeInSQLLab}}",
			"type": "string"
		},
		{
			"key": "DBConnectionSQLAlchemyURI",
			"value": "{{DBConnectionSQLAlchemyURI}}",
			"type": "string"
		},
		{
			"key": "PublicKey",
			"value": "{{PublicKey}}",
			"type": "string"
		},
		{
			"key": "KeyID",
			"value": "{{KeyID}}",
			"type": "string"
		},
		{
			"key": "NewWorkspaceDescription",
			"value": "{{NewWorkspaceDescription}}",
			"type": "string"
		},
		{
			"key": "NewWorkspaceColor",
			"value": "{{NewWorkspaceColor}}",
			"type": "string"
		},
		{
			"key": "NewWorkspaceIcon",
			"value": "{{NewWorkspaceIcon}}",
			"type": "string"
		},
		{
			"key": "MPCClusterID",
			"value": "{{MPCClusterID}}",
			"type": "string"
		}
	]
}